AWSTemplateFormatVersion: 2010-09-09
Description: Ubuntu Linux 22.04 ( https://github.com/aws-samples/ec2-lamp-server )
Transform: "AWS::LanguageExtensions"

Metadata:
  License:
    Description: >
      Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
      SPDX-License-Identifier: MIT-0

      Permission is hereby granted, free of charge, to any person obtaining a copy of this
      software and associated documentation files (the "Software"), to deal in the Software
      without restriction, including without limitation the rights to use, copy, modify,
      merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
      permit persons to whom the Software is furnished to do so.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
      INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
      PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
      OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2
        Parameters:
          - ec2Name
          - ec2KeyPair
          - processorArchitecture
          - instanceType
      - Label:
          default: Network
        Parameters:
          - vpcID
          - subnetID
          - displayPublicIP
          - assignStaticIP
      - Label:
          default: Remote administration
        Parameters:
          - ingressIPv4
          - ingressIPv6
      - Label:
          default: LAMP
        Parameters:
          - webOption
          - phpVersion
          - databaseOption
          - s3BucketName
          - r53ZoneID
      - Label:
          default: EBS volume
        Parameters:
          - volumeSize
          - volumeType
    ParameterLabels:
      processorArchitecture:
        default: "Processor architecture"
      instanceType:
        default: "Instance type (x86_64 or arm64)"
      ec2Name:
        default: "Instance name"
      ec2KeyPair:
        default: "Keypair name"
      volumeSize:
        default: "Volume size (GiB)"
      volumeType:
        default: "Volume type"
      vpcID:
        default: "VPC with internet connectivity"
      subnetID:
        default: "Subnet with internet connectivity"
      displayPublicIP:
        default: "EC2 in public subnet with public IP assigned?"
      assignStaticIP:
        default: "[Elastic IP] Assign static public internet IPv4 address?"
      ingressIPv4:
        default: "Allowed IPv4 prefix to SSH and NICE DCV"
      ingressIPv6:
        default: "Allowed IPv6 prefix to SSH and NICE DCV"
      webOption:
        default: "Web server to install"
      databaseOption:
        default: "Database server to install"
      phpVersion:
        default: "PHP version to install"
      s3BucketName:
        default: "(optional) S3 bucket name to grant access to"
      r53ZoneID:
        default: "(optional) Route 53 hosted zone ID to grant access to"

Parameters:
  processorArchitecture:
    Type: String
    Description: https://aws.amazon.com/ec2/graviton/ https://ubuntu.com/aws/pro
    AllowedValues:
      - "Ubuntu (Graviton arm64)"
      - "Ubuntu (Intel/AMD x86_64)"
      - "Ubuntu Pro (Graviton arm64)"
      - "Ubuntu Pro (Intel/AMD x86_64)"
    Default: "Ubuntu (Graviton arm64)"
  instanceType:
    Type: String
    Description: "https://console.aws.amazon.com/ec2/#InstanceTypes"
    Default: t4g.large

  ec2Name:
    Type: String
    #Description: EC2 instance name
    Default: UbuntuLinux-22.04-LAMP-Stack
  ec2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "https://console.aws.amazon.com/ec2/#KeyPairs"
    ConstraintDescription: Specify a key pair
    AllowedPattern: ".+"
  volumeSize:
    Type: Number
    #Description: Volume size in GiBs
    MinValue: 10
    MaxValue: 16384
    Default: 30
  volumeType:
    Type: String
    Description: https://aws.amazon.com/ebs/general-purpose/
    AllowedValues:
      - "gp3"
      - "gp2"
    Default: "gp3"

  vpcID:
    Type: AWS::EC2::VPC::Id
    Description: "https://console.aws.amazon.com/vpcconsole/home#vpcs:"
    ConstraintDescription: Specify a valid value
    AllowedPattern: ".+"
  subnetID:
    Type: AWS::EC2::Subnet::Id
    Description: "https://console.aws.amazon.com/vpcconsole/home#subnets:"
    ConstraintDescription: Specify a valid value
    AllowedPattern: ".+"
  assignStaticIP:
    Type: String
    Description: "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html"
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
  displayPublicIP:
    Type: String
    Description: "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses"
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"

  ingressIPv4:
    Type: String
    Description: "e.g. 1.2.3.4/32, get your source IP from https://checkip.amazonaws.com "
    Default: 0.0.0.0/0
  ingressIPv6:
    Type: String
    Description: "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#ipv6-addressing"
    Default: ::/0

  webOption:
    Type: String
    #Description: Web server to install
    AllowedValues:
      - "Apache"
      - "Nginx"
      - "none"
    Default: "Apache"
  databaseOption:
    Type: String
    #Description: Database to install
    AllowedValues:
      - "MariaDB"
      - "MySQL"
      - "PostgreSQL"
      - "none"
    Default: "MySQL"
  phpVersion:
    Type: String
    #Description: PHP version to install
    AllowedValues:
      - "php8.1"
      - "none"
    Default: "php8.1"
  s3BucketName:
    Type: String
    Description: "https://console.aws.amazon.com/s3/buckets"
    Default: ""
  r53ZoneID:
    Type: String
    Description: "https://console.aws.amazon.com/route53/v2/hostedzones"
    Default: ""

Conditions:
  useUbuntu2204x86:
    !Equals [!Ref processorArchitecture, "Ubuntu (Intel/AMD x86_64)"]
  useUbuntu2204arm64:
    !Equals [!Ref processorArchitecture, "Ubuntu (Graviton arm64)"]
  useUbuntuPro2204x86:
    !Equals [!Ref processorArchitecture, "Ubuntu Pro (Intel/AMD x86_64)"]

  useElasticIP: !Equals [!Ref assignStaticIP, "Yes"]
  displayPublicIP: !Equals [!Ref displayPublicIP, "Yes"]
  hasS3Bucket: !Not [!Equals [!Ref s3BucketName, ""]]
  hasR53Zone: !Not [!Equals [!Ref r53ZoneID, ""]]
  hasEIC:
    !Not [
      !Equals [
        !FindInMap [
          EICprefixMap,
          !Ref AWS::Region,
          "IpPrefix",
          DefaultValue: 127.0.0.1/32,
        ],
        "127.0.0.1/32",
      ],
    ]
  createEICsg: !And [!Condition hasEIC, !Condition displayPublicIP]

Mappings:
  EICprefixMap: # EC2 instance connect: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-prerequisites.html#ec2-instance-connect-setup-security-group
    af-south-1:
      IpPrefix: 13.244.121.196/30
    ap-east-1:
      IpPrefix: 43.198.192.104/29
    ap-northeast-1:
      IpPrefix: 3.112.23.0/29
    ap-northeast-2:
      IpPrefix: 13.209.1.56/29
    ap-northeast-3:
      IpPrefix: 15.168.105.160/29
    ap-south-1:
      IpPrefix: 13.233.177.0/29
    ap-south-2:
      IpPrefix: 18.60.252.248/29
    ap-southeast-1:
      IpPrefix: 3.0.5.32/29
    ap-southeast-2:
      IpPrefix: 13.239.158.0/29
    ap-southeast-3:
      IpPrefix: 43.218.193.64/29
    ap-southeast-4:
      IpPrefix: 16.50.248.80/29
    ca-central-1:
      IpPrefix: 35.183.92.176/29
    cn-north-1:
      IpPrefix: 43.196.20.40/29
    cn-northwest-1:
      IpPrefix: 43.192.155.8/29
    eu-central-1:
      IpPrefix: 3.120.181.40/29
    eu-central-2:
      IpPrefix: 16.63.77.8/29
    eu-north-1:
      IpPrefix: 13.48.4.200/30
    eu-south-1:
      IpPrefix: 15.161.135.164/30
    eu-south-2:
      IpPrefix: 18.101.90.48/29
    eu-west-1:
      IpPrefix: 18.202.216.48/29
    eu-west-2:
      IpPrefix: 3.8.37.24/29
    eu-west-3:
      IpPrefix: 35.180.112.80/29
    il-central-1:
      IpPrefix: 51.16.183.224/29
    me-central-1:
      IpPrefix: 3.29.147.40/29
    me-south-1:
      IpPrefix: 16.24.46.56/29
    sa-east-1:
      IpPrefix: 18.228.70.32/29
    us-east-1:
      IpPrefix: 18.206.107.24/29
    us-east-2:
      IpPrefix: 3.16.146.0/29
    us-gov-east-1:
      IpPrefix: 18.252.4.0/30
    us-gov-west-1:
      IpPrefix: 15.200.28.80/30
    us-west-1:
      IpPrefix: 13.52.6.112/29
    us-west-2:
      IpPrefix: 18.237.140.160/29

Resources:
  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound DCV, SSH, HTTP, HTTPS
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - Description: SSH (IPv4)
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ingressIPv4
        - Description: SSH (IPv6)
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIpv6: !Ref ingressIPv6
        - Description: NICE DCV (IPv4)
          IpProtocol: "tcp"
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref ingressIPv4
        - Description: NICE DCV (IPv6)
          IpProtocol: "tcp"
          FromPort: 8443
          ToPort: 8443
          CidrIpv6: !Ref ingressIPv6
        - Description: NICE DCV QUIC (IPv4)
          IpProtocol: "udp"
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref ingressIPv4
        - Description: NICE DCV QUIC (IPv6)
          IpProtocol: "udp"
          FromPort: 8443
          ToPort: 8443
          CidrIpv6: !Ref ingressIPv6
        - Description: HTTP (IPv4)
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: HTTP (IPv6)
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
        - Description: HTTPS (IPv4)
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - Description: HTTPS (IPv6)
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
      SecurityGroupEgress:
        - Description: Allow all outbound traffic (IPv4)
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
        - Description: Allow all outbound traffic (IPv6)
          IpProtocol: "-1"
          CidrIpv6: ::/0
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - ${ec2Name}"
        - Key: GitHub
          Value: https://github.com/aws-samples/ec2-lamp-server

  securityGroupForEIC:
    Condition: createEICsg
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow in-browser SSH via EC2 Instance Connect
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - Description: SSH from EIC IP
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp:
            !FindInMap [
              EICprefixMap,
              !Ref AWS::Region,
              "IpPrefix",
              DefaultValue: 127.0.0.1/32,
            ]
      SecurityGroupEgress:
        - Description: Allow ICMP to EIC IP
          IpProtocol: "icmp"
          FromPort: -1
          ToPort: -1
          CidrIp:
            !FindInMap [
              EICprefixMap,
              !Ref AWS::Region,
              "IpPrefix",
              DefaultValue: 127.0.0.1/32,
            ]
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - ${ec2Name} - EIC"
        - Key: GitHub
          Value: https://github.com/aws-samples/ec2-lamp-server

  instanceIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies: # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-license.html
        - PolicyName: dcvLicensing
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:${AWS::Partition}:s3:::dcv-license.${AWS::Region}/*"
        - PolicyName: S3BucketAccess
          PolicyDocument: # MountPoint for S3: https://github.com/awslabs/mountpoint-s3/blob/main/doc/CONFIGURATION.md
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3:::${bucketName}"
                  - bucketName:
                      !If [hasS3Bucket, !Ref s3BucketName, "NONEXISTENT-BUCKET"]
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:AbortMultipartUpload
                  - s3:DeleteObject
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3:::${bucketName}/*"
                  - bucketName:
                      !If [hasS3Bucket, !Ref s3BucketName, "NONEXISTENT-BUCKET"]
        - PolicyName: R53ZoneAccess
          PolicyDocument: # Certbot dns_route53 : https://certbot-dns-route53.readthedocs.io/en/stable/
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - route53:ListHostedZones
                  - route53:GetChange
                Resource: "*"
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource: !Sub
                  - "arn:${AWS::Partition}:route53:::hostedzone/${hostedZone}"
                  - hostedZone:
                      !If [hasR53Zone, !Ref r53ZoneID, "NONEXISTENT-ZONE"]
                Condition:
                  ForAllValues:StringEquals:
                    "route53:ChangeResourceRecordSetsRecordTypes": ["TXT"]
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeployLimited"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess"
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: GitHub
          Value: https://github.com/aws-samples/ec2-lamp-server

  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref instanceIamRole

  ec2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT90M
    Metadata:
      Comment: Install Update files
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - 00_setup
        00_setup: # in the following order: packages, groups, users, sources, files, commands, and then services.
          files:
            "/home/ubuntu/update-dcv":
              content: |
                #!/bin/bash
                cd /tmp
                sudo dcv close-session ubuntu
                sudo dcv close-session console
                if ((arch | grep -q x86) && (cat /etc/os-release | grep -q 22.04)); then
                  rm -f /tmp/nice-dcv-ubuntu2204-x86_64.tgz
                  wget https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-ubuntu2204-x86_64.tgz
                  tar -xvzf nice-dcv-ubuntu*.tgz && cd nice-dcv-*-x86_64
                else
                  rm -f /tmp/nice-dcv-ubuntu2204-aarch64.tgz
                  wget https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-ubuntu2204-aarch64.tgz
                  tar -xvzf nice-dcv-ubuntu*.tgz && cd nice-dcv-*-aarch64
                fi
                sudo systemctl stop dcvserver
                sudo apt-get install -y ./nice-dcv-server_*.deb
                sudo apt-get install -y ./nice-dcv-web-viewer_*.deb
                sudo apt-get install -y ./nice-xdcv_*.deb
                sudo apt-get install -y ./nice-dcv-gltest_*.deb
                sudo systemctl restart dcvserver
              mode: "000755"
              owner: "ubuntu"
              group: "ubuntu"
            "/home/ubuntu/update-awscli":
              content: |
                #!/bin/bash
                cd /tmp
                rm -f awscliv2.zip
                if (arch | grep -q x86); then
                  curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
                else
                  curl https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip
                fi
                unzip -q -o awscliv2.zip
                /usr/bin/aws --version
                sudo ./aws/install --update -b /usr/bin
                /usr/bin/aws --version
              mode: "000755"
              owner: "ubuntu"
              group: "ubuntu"
            "/home/ubuntu/update-mountpoint-s3":
              content: |
                #!/bin/bash
                cd /tmp
                rm -f ./mount-s3.deb
                if (uname -a | grep -q x86); then
                  wget -4 https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.deb
                else
                  wget -4 https://s3.amazonaws.com/mountpoint-s3-release/latest/arm64/mount-s3.deb
                fi
                sudo apt-get install -y ./mount-s3.deb
              mode: "000755"
              owner: "ubuntu"
              group: "ubuntu"
            "/etc/systemd/system/dcv-virtual-session.service":
              content: |
                [Unit]
                Description=Create DCV virtual session
                After=default.target network.target

                [Service]
                ExecStart=/opt/dcv-virtual-session.sh

                [Install]
                WantedBy=default.target
              mode: "000644"
              owner: "root"
              group: "root"
            "/opt/dcv-virtual-session.sh":
              content: |
                #!/bin/bash
                dcvUser=ubuntu
                while true;
                do
                  if (/usr/bin/dcv list-sessions | grep -q $dcvUser); then
                    sleep 5
                  else
                    /usr/bin/dcv create-session $dcvUser --owner $dcvUser --storage-root /home/$dcvUser
                    /usr/bin/dcv list-sessions
                  fi
                done
              mode: "000755"
              owner: "root"
              group: "root"
            "/etc/systemd/system/dcv-post-reboot.service":
              content: |
                [Unit]
                Description=Post install tasks
                After=default.target network.target

                [Service]
                ExecStart=/opt/dcv-post-reboot.sh

                [Install]
                WantedBy=default.target
              mode: "000644"
              owner: "root"
              group: "root"
            "/opt/dcv-post-reboot.sh":
              content: !Sub |
                #!/bin/bash
                sysctl -w net.ipv6.conf.all.disable_ipv6=1
                sysctl -w net.ipv6.conf.default.disable_ipv6=1

                # USB remotization: https://docs.aws.amazon.com/dcv/latest/adminguide/manage-usb-remote.html
                apt-get install -q -y linux-headers-aws
                apt-get install -q -y linux-modules-extra-aws
                apt-get install -q -y usbutils
                # dcvusbdriverinstaller --quiet

                python3 /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region}
                sysctl -w net.ipv6.conf.all.disable_ipv6=0
                sysctl -w net.ipv6.conf.default.disable_ipv6=0

                systemctl enable dcv-virtual-session && systemctl restart dcv-virtual-session
                systemctl enable dcvserver && systemctl restart dcvserver

                rm -f /etc/systemd/system/dcv-post-reboot.service
                rm -f ${!0}
                systemctl daemon-reload
              mode: "000755"
              owner: "root"
              group: "root"
            "/opt/aws/amazon-cloudwatch-agent/bin/config.json":
              content: |
                {
                  "agent": {
                    "metrics_collection_interval": 60,
                    "run_as_user": "cwagent"
                  },
                  "metrics": {
                    "aggregation_dimensions": [
                      [
                        "InstanceId"
                      ]
                    ],
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "disk": {
                        "measurement": [
                          "used_percent"
                        ],
                        "metrics_collection_interval": 60,
                          "resources": [
                            "/"
                          ]
                      },
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ],
                        "metrics_collection_interval": 60
                      },                
                      "diskio": {
                        "measurement": [
                          "io_time"
                        ],
                        "metrics_collection_interval": 60,
                        "resources": [
                          "nvme0n1"
                        ]
                      },
                      "cpu": {
                        "measurement": [
                          "cpu_usage_idle",
                          "cpu_usage_iowait",
                          "cpu_usage_user",
                          "cpu_usage_system"
                        ],
                        "metrics_collection_interval": 60,
                        "totalcpu": false
                      }
                    }
                  },
                  "traces": {
                    "buffer_size_mb": 3,
                    "concurrency": 8,
                    "insecure": false,
                    "traces_collected": {
                      "xray": {
                        "bind_address": "127.0.0.1:2000",
                        "tcp_proxy": {
                          "bind_address": "127.0.0.1:2000"
                        }
                      }
                    }
                  }
                }
              mode: "000644"
              owner: "root"
              group: "root"
    Properties:
      ImageId: # https://ubuntu.com/server/docs/cloud-images/amazon-ec2 https://ubuntu.com/blog/ubuntu-pro-is-now-part-of-the-aws-ec2-console
        !If [
          useUbuntu2204x86,
          "{{resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id}}",
          !If [
            useUbuntu2204arm64,
            "{{resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/arm64/hvm/ebs-gp2/ami-id}}",
            !If [
              useUbuntuPro2204x86,
              "{{resolve:ssm:/aws/service/canonical/ubuntu/pro-server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id}}",
              "{{resolve:ssm:/aws/service/canonical/ubuntu/pro-server/22.04/stable/current/arm64/hvm/ebs-gp2/ami-id}}",
            ],
          ],
        ]
      InstanceType: !Ref instanceType
      IamInstanceProfile: !Ref instanceProfile
      KeyName: !Ref ec2KeyPair
      SubnetId: !Ref subnetID
      Monitoring: true
      SecurityGroupIds:
        - !Ref securityGroup
        - !If [createEICsg, !Ref securityGroupForEIC, !Ref AWS::NoValue]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: !Ref volumeType
            VolumeSize: !Ref volumeSize
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          mkdir -p /tmp/cfn
          cd /tmp/cfn

          # disable IPv6 during setup
          sysctl -w net.ipv6.conf.all.disable_ipv6=1
          sysctl -w net.ipv6.conf.default.disable_ipv6=1

          # https://stackoverflow.com/questions/33370297/apt-get-update-non-interactive
          export DEBIAN_FRONTEND=noninteractive

          apt-get clean all
          apt-get update -q
          apt-get install -q -y wget tmux unzip tar curl sed

          # CfN scripts: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
          apt-get install -q -y python3 python3-pip python3-setuptools python3-docutils python3-daemon
          curl -s -L -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          tar -xf aws-cfn-bootstrap-py3-latest.tar.gz
          cd aws-cfn-bootstrap-2.0
          python3 setup.py build
          python3 setup.py install
          cd /tmp/cfn
          export CFN_INIT="python3 /usr/local/bin/cfn-init"

          $CFN_INIT -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c setup

          # NICE DCV prereq: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html
          apt-get install -q -y ubuntu-desktop-minimal
          apt-get install -q -y gdm3
          # Microphone redirection: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html
          apt-get install -q -y pulseaudio-utils
          apt-get install -q -y gnome-tweaks gnome-shell-extension-ubuntu-dock
          apt-get install -q -y gnome-shell-extension-manager

          # Disable the Wayland protocol: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html#linux-prereq-wayland
          sed -i '/^\[daemon\]/a WaylandEnable=false' /etc/gdm3/custom.conf

          # resolve "/var/lib/dpkg/info/nice-dcv-server.postinst: 8: dpkg-architecture: not found" when installing dcv-server
          apt-get install -q -y dpkg-dev

          # NICE DCV: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html
          curl -s -L -O https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY
          gpg --import NICE-GPG-KEY
          if (arch | grep -q x86); then
            curl -s -L -O https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-ubuntu2204-x86_64.tgz
            tar -xvzf nice-dcv-ubuntu*.tgz && cd nice-dcv-*-x86_64
          else
            curl -s -L -O https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-ubuntu2204-aarch64.tgz
            tar -xvzf nice-dcv-ubuntu*.tgz && cd nice-dcv-*-aarch64
          fi
          apt-get install -q -y ./nice-dcv-server_*.deb
          apt-get install -q -y ./nice-dcv-web-viewer_*.deb
          usermod -aG video dcv
          apt-get install -q -y ./nice-xdcv_*.deb
          apt-get install -q -y ./nice-dcv-gltest_*.deb

          # Printer redirection: https://docs.aws.amazon.com/dcv/latest/adminguide/manage-printer.html
          apt-get install -q -y cups
          GROUP=$(cat /etc/cups/cups-files.conf | grep -oP "SystemGroup\s\K\w+")
          usermod -a -G $GROUP dcv
          systemctl enable cups

          # QUIC: https://docs.aws.amazon.com/dcv/latest/adminguide/enable-quic.html
          cp /etc/dcv/dcv.conf /etc/dcv/dcv.conf."`date +"%Y-%m-%d"`"
          sed -i "s/^#enable-quic-frontend=true/enable-quic-frontend=true/g" /etc/dcv/dcv.conf

          # remove AWSCLI version 1
          apt-get remove -q -y awscli

          cd /tmp/cfn
          # AWS CLI v2: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
          if (arch | grep -q x86); then
            curl -s https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
          else
            curl -s https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip
          fi
          unzip -q -o awscliv2.zip
          ./aws/install -b /usr/bin
          echo "export AWS_CLI_AUTO_PROMPT=on-partial" >> /home/ubuntu/.bashrc

          # X11 dummy driver for non GPU instance console session
          apt-get install -q -y xserver-xorg-video-dummy
          $CFN_INIT -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c console

          # Higher web client max resolution: https://docs.aws.amazon.com/dcv/latest/adminguide/config-param-ref.html
          sed -i "/^\[display/a web-client-max-head-resolution=(4096, 2160)" /etc/dcv/dcv.conf
          # Console session support
          sed -i "/^\[session-management\/automatic-console-session/a owner=\"ubuntu\"\nstorage-root=\"\/home\/ubuntu\"" /etc/dcv/dcv.conf

          # Update OS
          apt-get update -q
          apt-get upgrade -q -y
          apt-get autoremove -q -y

          # USB and GPU driver DKMS
          apt-get install -q -y dkms

          # Disable reporting : https://wiki.ubuntu.com/Apport
          sed -i "s/enabled=1/enable=0/g" /etc/default/apport
          apt-get remove -q -y ubuntu-report whoopsie apport

          # MountPoint-S3: https://github.com/awslabs/mountpoint-s3
          if (uname -a | grep -q x86); then
            curl -s -L -O https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.deb
          else
            curl -s -L -O https://s3.amazonaws.com/mountpoint-s3-release/latest/arm64/mount-s3.deb
          fi
          apt-get install -q -y ./mount-s3.deb

          # Redis & Memcached
          apt-get install -q -y redis-server memcached
          systemctl enable --now redis-server memcached

          # PHP
          export PHP="${phpVersion}"
          case $PHP in
            none)
              ;;
            *)
              # PHP install
              apt-get install -q -y php8.1 php8.1-{common,fpm,opcache,apcu}
              apt-get install -q -y php8.1-{memcached,redis}
              apt-get install -q -y php8.1-{mysql,pgsql,dba}
              apt-get install -q -y php8.1-{xml,xmlrpc,xsl,soap,ldap,zip,bz2,intl,curl}
              apt-get install -q -y php8.1-{mbstring,bcmath,imagick,gd}
              apt-get install -q -y php8.1-{igbinary,msgpack}

              # PHP-FPM ini
              cp /etc/php/8.1/fpm/php.ini /etc/php/8.1/fpm/php.ini."`date +"%Y-%m-%d"`"

              # https://www.php.net/manual/en/opcache.configuration.php
              # https://github.com/php/php-src/issues/7817#issuecomment-1420343474
              sed -i "/^\[opcache\]/a opcache.enable=1\nopcache.jit=1205\nopcache.jit_buffer_size=100M" /etc/php/8.1/fpm/php.ini
              sed -i "s/^opcache.enable_cli/;&" /etc/php/8.1/fpm/php.ini
              sed -i "/^;opcache.enable_cli/a opcache.enable_cli=1" /etc/php/8.1/fpm/php.ini

              sed -i "/^;max_input_vars/a max_input_vars=5000" /etc/php/8.1/fpm/php.ini
              sed -i 's/memory_limit =.*/memory_limit = 4096M/' /etc/php/8.1/fpm/php.ini
              sed -i 's/upload_max_filesize =.*/upload_max_filesize = 16M/' /etc/php/8.1/fpm/php.ini
              sed -i 's/post_max_size =.*/post_max_size = 16M/' /etc/php/8.1/fpm/php.ini

              # https://www.php.net/manual/en/class.sessionhandler.php
              sed -i "s/^session.save_handler/;&/" /etc/php/8.1/fpm/php.ini
              sed -i "/^;session.save_handler/a session.save_handler = redis" /etc/php/8.1/fpm/php.ini
              sed -i "s/^session.save_path/;&/" /etc/php/8.1/fpm/php.ini
              sed -i '/^;session.save_path/a session.save_path = "tcp://127.0.0.1:6379"' /etc/php/8.1/fpm/php.ini

              # PHP CLI ini
              cp /etc/php/8.1/cli/php.ini /etc/php/8.1/cli/php.ini."`date +"%Y-%m-%d"`"
              cp /etc/php/8.1/fpm/php.ini /etc/php/8.1/cli/php.ini

              # php-fpm only: https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.file-cache
              mkdir -p /var/www/.opcache
              chown www-data:www-data /var/www/.opcache
              sed -i 's/;opcache.file_cache=.*/;opcache.file_cache=\/var\/www\/.opcache/' /etc/php/8.1/fpm/php.ini

              # https://www.php.net/manual/en/install.pecl.pear.php
              apt-get install -q -y php8.1-dev php-pear gcc
              pear update-channels
              pecl update-channels

              # php-lzf: https://github.com/php/pecl-file_formats-lzf/blob/master/package.xml
              apt-get install -q -y php8.1-lzf
              if (! php -m | grep -q lzf); then
                yes 'no' | pecl install --configureoptions 'enable-lzf-better-compression="no"' lzf
                echo 'extension=lzf.so' > /etc/php/8.1/mods-available/lzf.ini
                ln -s /etc/php/8.1/mods-available/lzf.ini /etc/php/8.1/fpm/conf.d/40-lzf.ini
                ln -s /etc/php/8.1/mods-available/lzf.ini /etc/php/8.1/cli/conf.d/40-lzf.ini
              fi

              # php-zstd: https://github.com/kjdev/php-ext-zstd/blob/master/package.xml
              apt-get install -q -y php8.1-zstd
              if (! php -m | grep -q zstd); then
                apt-get install -q -y libzstd-dev
                yes 'no' | pecl install zstd
                echo 'extension=zstd.so' > /etc/php/8.1/mods-available/zstd.ini
                ln -s /etc/php/8.1/mods-available/zstd.ini /etc/php/8.1/fpm/conf.d/40-zstd.ini
                ln -s /etc/php/8.1/mods-available/zstd.ini /etc/php/8.1/cli/conf.d/40-zstd.ini
              fi

              # php-lz4: https://github.com/kjdev/php-ext-lz4
              apt-get install -q -y php8.1-lz4
              if (! php -m | grep -q lz4); then
                cd /tmp/cfn
                apt-get install -q -y git liblz4-dev
                git clone --recursive --depth=1 https://github.com/kjdev/php-ext-lz4.git
                cd php-ext-lz4
                phpize
                ./configure --with-lz4-includedir=/usr
                make
                make install
                echo 'extension=lz4.so' > /etc/php/8.1/mods-available/lz4.ini
                ln -s /etc/php/8.1/mods-available/lz4.ini /etc/php/8.1/fpm/conf.d/40-lz4.ini
                ln -s /etc/php/8.1/mods-available/lz4.ini /etc/php/8.1/cli/conf.d/40-lz4.ini
              fi
              cd /tmp/cfn

              # Composer: https://getcomposer.org/download/
              apt-get install -q -y composer

              systemctl enable php8.1-fpm
              systemctl restart php8.1-fpm

              ;;
          esac

          # Certbot
          apt-get install -q -y certbot
          apt-get install -q -y python3-certbot-dns-route53 python-certbot-dns-route53-doc 

          # Web server
          export WEB="${webOption}"
          case $WEB in
            Apache)
              apt-get install -q -y python3-certbot-apache
              apt-get install -q -y apache2 libapache2-mod-fcgid
              systemctl enable apache2

              # Apache MPM event: https://httpd.apache.org/docs/2.4/mod/event.html
              a2dismod php8.1
              a2dismod mpm_prefork
              a2enmod mpm_event proxy_fcgi setenvif
              a2enconf php8.1-fpm

              # Enable HTTPS 
              a2enmod ssl
              a2enmod rewrite
              a2enmod http2

              # HTTPS site: for Certbot
              a2ensite default-ssl

              # Enable index.php
              sed -i "s/\bDirectoryIndex\b/& index.php/" /etc/apache2/mods-enabled/dir.conf

              # Change permissions and ownership
              usermod -a -G www-data ubuntu
              chown -R ubuntu:www-data /var/www/html
              chmod -R 2775 /var/www/html
              find /var/www/html -type d -exec sudo chmod 2775 {} \;
              find /var/www/html -type f -exec sudo chmod 0664 {} \;

              systemctl restart apache2
              ;;
            Nginx)
              apt-get install -q -y python3-certbot-nginx
              apt-get install -q -y nginx-full
              systemctl enable nginx

              cp /etc/nginx/sites-available/default  /etc/nginx/sites-available/default."`date +"%Y-%m-%d"`"
              # Enable HTTPS and PHP8.1-FPM
              sed -i "27,28s/#//g" /etc/nginx/sites-available/default
              sed -i "39,39s/#//g" /etc/nginx/sites-available/default
              sed -i "56,57s/#//g" /etc/nginx/sites-available/default
              sed -i "60,60s/#//g" /etc/nginx/sites-available/default
              sed -i "s/7.4/8.1/g" /etc/nginx/sites-available/default
              sed -i "63,63s/#//g" /etc/nginx/sites-available/default
              # Enable index.php
              sed -i "s/index index.html index.htm index.nginx-debian.html;/index index.php index.html index.htm index.nginx-debian.html;/g" /etc/nginx/sites-available/default

              cp /etc/nginx/nginx.conf  /etc/nginx/nginx.conf."`date +"%Y-%m-%d"`"
              # disable gzip as per https://bugs.debian.org/773332
              sed -i "s/gzip on/gzip off/g" /etc/nginx/nginx.conf

              # Change permissions and ownership
              usermod -a -G www-data ubuntu
              chown -R ubuntu:www-data /var/www/html
              chmod -R 2775 /var/www/html
              find /var/www/html -type d -exec sudo chmod 2775 {} \;
              find /var/www/html -type f -exec sudo chmod 0664 {} \;

              systemctl restart nginx
              ;;
            none)
              apt-get remove -y apache2
              ;;
          esac

          # Database
          export DB="${databaseOption}"
          case $DB in
            MySQL)
              apt-get install -q -y mysql-server-8.0
              systemctl enable mysql
              ;;
            MariaDB)
              apt-get install -q -y mariadb-server-10.6
              systemctl enable mariadb
              ;;
            PostgreSQL)
              apt-get install -q -y postgresql
              systemctl enable postgresql
              ;;
          esac

          # NFS client
          apt-get install -q -y nfs-common

          # CodeDeploy agent: https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-ubuntu.html
          apt-get install -q -y ruby-full
          curl -s -L -O https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto

          # CloudWatch agent: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-on-EC2-Instance.html
          if (uname -a | grep -q x86); then
            curl -s -L -O https://s3.${AWS::Region}.amazonaws.com/amazoncloudwatch-agent-${AWS::Region}/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
          else
            curl -s -L -O https://s3.${AWS::Region}.amazonaws.com/amazoncloudwatch-agent-${AWS::Region}/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb
          fi
          apt-get install -q -y ./amazon-cloudwatch-agent.deb

          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
          systemctl enable amazon-cloudwatch-agent

          #
          systemctl set-default multi-user.target
          systemctl daemon-reload
          systemctl enable dcv-post-reboot

          # enable back IPv6
          sysctl -w net.ipv6.conf.all.disable_ipv6=0
          sysctl -w net.ipv6.conf.default.disable_ipv6=0

          sleep 1 && reboot
      Tags:
        - Key: Name
          Value: !Ref ec2Name
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: GitHub
          Value: https://github.com/aws-samples/ec2-lamp-server

  elasticIP:
    Condition: useElasticIP
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      NetworkBorderGroup: !Ref AWS::Region
      InstanceId: !Ref ec2Instance
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - ${ec2Name}"
        - Key: GitHub
          Value: https://github.com/aws-samples/ec2-lamp-server

Outputs:
  EC2console:
    Description: EC2 console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/home?region=${AWS::Region}#Instances:search=${ec2Instance}"

  EC2instanceConnect:
    Condition: createEICsg
    Description: EC2 Instance Connect
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2-instance-connect/ssh?connType=standard&instanceId=${ec2Instance}&osUser=ubuntu&sshPort=22#/"

  SSMsessionManager:
    Description: SSM Session Manager login ("sudo passwd ubuntu" to change password)
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${ec2Instance}"

  DCVwebConsole:
    Description: NICE DCV web browser client (login as ubuntu)
    Value:
      !If [
        displayPublicIP,
        !Sub "https://${ec2Instance.PublicIp}:8443",
        !Sub "https://${ec2Instance.PrivateIp}:8443",
      ]

  WebUrl:
    Description: Website
    Value:
      !If [
        displayPublicIP,
        !Sub "http://${ec2Instance.PublicIp}",
        !Sub "http://${ec2Instance.PrivateIp}",
      ]
