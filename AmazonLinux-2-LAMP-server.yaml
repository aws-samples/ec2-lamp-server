AWSTemplateFormatVersion: 2010-09-09
Description: Amazon Linux 2 with LAMP/LEPP/LAPP/LEPP stack

Metadata:
  License:
    Description: >
      Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
      SPDX-License-Identifier: MIT-0

      Permission is hereby granted, free of charge, to any person obtaining a copy of this
      software and associated documentation files (the "Software"), to deal in the Software
      without restriction, including without limitation the rights to use, copy, modify,
      merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
      permit persons to whom the Software is furnished to do so.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
      INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
      PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
      OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2
        Parameters:
          - processorArchitecture
          - instanceType
          - ec2Name
          - ec2KeyPair
          - volumeSize
      - Label:
          default: VPC
        Parameters:
          - vpcID
          - subnetID
          - assignStaticIP
          - displayPublicIP
      - Label:
          default: LAMP configuration
        Parameters:
          - webOption
          - phpVersion
          - databaseOption
          - s3BucketName
          - r53ZoneID
      - Label:
          default: Remote administration
        Parameters:
          - ingressIPv4
          - ingressIPv6
    ParameterLabels:
      processorArchitecture:
        default: "Processor architecture (x86_64 or arm64)"
      instanceType:
        default: "Instance type"
      ec2Name:
        default: "Instance name"
      ec2KeyPair:
        default: "Keypair name"
      volumeSize:
        default: "Volume size"
      vpcID:
        default: "VPC with internet connectivity"
      subnetID:
        default: "Subnet with internet connectivity"
      assignStaticIP:
        default: "Assign static internet IPv4 address?"
      displayPublicIP:
        default: "Display public internet IP?"
      ingressIPv4:
        default: "Allowed IPv4 prefix to SSH and NICE DCV ( e.g. 1.2.3.4/32, get your source IP from https://checkip.amazonaws.com )"
      ingressIPv6:
        default: "Allowed IPv6 prefix to SSH and NICE DCV"
      webOption:
        default: "Web server to install?"
      databaseOption:
        default: "Database server to install?"
      phpVersion:
        default: "PHP version to install?"
      s3BucketName:
        default: "(optional) S3 bucket name to grant access to"
      r53ZoneID:
        default: "(optional) Route 53 hosted zone to grant access to"

Parameters:
  processorArchitecture:
    Type: String
    #Description: Processor architecture
    AllowedValues:
      - Intel/AMD AMD64 (x86_64)
      - Graviton ARM64 (aarch64)
    Default: Graviton ARM64 (aarch64)
  instanceType:
    Type: String
    #Description: Instance Type (x86_64 or arm64) ( https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html )
    Default: t4g.large

  ec2Name:
    Type: String
    #Description: EC2 instance name
    Default: AmazonLinux-2-LAMP-Stack
  ec2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    #Description: Key Pair name
    ConstraintDescription: Specify a Key pairs
    AllowedPattern: ".+"
  volumeSize:
    Type: Number
    #Description: Volume size in GiBs
    Default: 20

  vpcID:
    Type: AWS::EC2::VPC::Id
    #Description: VPC with internet connectivity
    ConstraintDescription: Do specify a valid value
    AllowedPattern: ".+"
  subnetID:
    Type: AWS::EC2::Subnet::Id
    #Description: Subnet with internet connectivity
    ConstraintDescription: Do specify a valid value
    AllowedPattern: ".+"
  assignStaticIP:
    Type: String
    #Description: Associate static public IPv4 address ( https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html )
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
  displayPublicIP:
    Type: String
    #Description: Display EC2 public IP in CloudFormation Outputs (select No if EC2 has no public IP)
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"

  ingressIPv4:
    Type: String
    #Description: Allowed source prefix (IPv4) to SSH and NICE DCV ( e.g. 1.2.3.4/32, get your source IP from https://checkip.amazonaws.com )
    Default: 0.0.0.0/0
  ingressIPv6:
    Type: String
    #Description: Allowed source prefix (IPv6) to SSH and NICE DCV
    Default: ::/0

  webOption:
    Type: String
    #Description: Web server to install
    AllowedValues:
      - "Apache"
      - "Nginx"
    Default: "Apache"
  databaseOption:
    Type: String
    #Description: Database to install
    AllowedValues:
      - "MariaDB"
      - "MySQL"
      - "PostgreSQL"
      - "none"
    Default: "MariaDB"
  phpVersion:
    Type: String
    #Description: PHP version to install
    AllowedValues:
      - "php8.1"
      - "php8.2"
    Default: "php8.1"
  s3BucketName:
    Type: String
    #Description: (Optional) S3 bucket name to grant full access to ( https://s3.console.aws.amazon.com/ )
    Default: ""
  r53ZoneID:
    Type: String
    #Description: (Optional) Route 53 hosted zone ID to grant access to ( https://console.aws.amazon.com/route53/v2/hostedzones )
    Default: ""

Conditions:
  useARM64: !Equals [!Ref processorArchitecture, "Graviton ARM64 (aarch64)"]
  useElasticIP: !Equals [!Ref assignStaticIP, "Yes"]
  displayPublicIP: !Equals [!Ref displayPublicIP, "Yes"]
  hasS3Bucket: !Not [!Equals [!Ref s3BucketName, ""]]
  hasR53Zone: !Not [!Equals [!Ref r53ZoneID, ""]]

Resources:
  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound DCV
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - Description: SSH (IPv4)
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ingressIPv4
        - Description: SSH (IPv6)
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIpv6: !Ref ingressIPv6
        - Description: NICE DCV (IPv4)
          IpProtocol: "tcp"
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref ingressIPv4
        - Description: NICE DCV (IPv6)
          IpProtocol: "tcp"
          FromPort: 8443
          ToPort: 8443
          CidrIpv6: !Ref ingressIPv6
        - Description: NICE DCV QUIC (IPv4)
          IpProtocol: "udp"
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref ingressIPv4
        - Description: NICE DCV QUIC (IPv6)
          IpProtocol: "udp"
          FromPort: 8443
          ToPort: 8443
          CidrIpv6: !Ref ingressIPv6
        - Description: HTTP (IPv4)
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: HTTP (IPv6)
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
        - Description: HTTPS (IPv4)
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - Description: HTTPS (IPv6)
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
      SecurityGroupEgress:
        - Description: Allow all outbound traffic (IPv4)
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
        - Description: Allow all outbound traffic (IPv6)
          IpProtocol: "-1"
          CidrIpv6: ::/0
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - ${ec2Name}"
        - Key: GitHub
          Value: https://github.com/aws-samples/ec2-lamp-server

  instanceIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies: # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-license.html
        - PolicyName: dcvLicensing
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:${AWS::Partition}:s3:::dcv-license.${AWS::Region}/*"
        - PolicyName: S3BucketAccess
          PolicyDocument: # MountPoint for S3: https://github.com/awslabs/mountpoint-s3/blob/main/doc/CONFIGURATION.md
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3:::${bucketName}"
                  - bucketName:
                      !If [hasS3Bucket, !Ref s3BucketName, "NONEXISTENT-BUCKET"]
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:AbortMultipartUpload
                  - s3:DeleteObject
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3:::${bucketName}/*"
                  - bucketName:
                      !If [hasS3Bucket, !Ref s3BucketName, "NONEXISTENT-BUCKET"]
        - PolicyName: R53ZoneAccess
          PolicyDocument: # Certbot dns_route53 : https://certbot-dns-route53.readthedocs.io/en/stable/
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - route53:ListHostedZones
                  - route53:GetChange
                Resource: "*"
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource: !Sub
                  - "arn:${AWS::Partition}:route53:::hostedzone/${hostedZone}"
                  - hostedZone:
                      !If [hasR53Zone, !Ref r53ZoneID, "NONEXISTENT-ZONE"]
                Condition:
                  ForAllValues:StringEquals:
                    "route53:ChangeResourceRecordSetsRecordTypes": ["TXT"]
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: GitHub
          Value: https://github.com/aws-samples/ec2-lamp-server

  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref instanceIamRole

  ec2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT90M
    Properties:
      ImageId:
        !If [
          useARM64,
          "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2}}",
          "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}",
        ]
      InstanceType: !Ref instanceType
      IamInstanceProfile: !Ref instanceProfile
      KeyName: !Ref ec2KeyPair
      SubnetId: !Ref subnetID
      Monitoring: true
      SecurityGroupIds:
        - !Ref securityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: !Ref volumeSize
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          mkdir -p /tmp/cfn
          cd /tmp/cfn

          # https://docs.aws.amazon.com/systems-manager/latest/userguide/agent-install-al2.html
          if (uname -a | grep x86 1>/dev/null); then
            yum install -q -y https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm
          else
            yum install -q -y https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-${AWS::Region}/latest/linux_arm64/amazon-ssm-agent.rpm
          fi

          # cfn-init
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region}

          yum install -q -y deltarpm wget tmux unzip tar curl sed
          # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html
          yum install -q -y gdm gnome-session gnome-classic-session gnome-session-xsession
          yum install -q -y xorg-x11-server-Xorg xorg-x11-fonts-Type1 xorg-x11-drivers 
          yum install -q -y gnome-terminal gnu-free-fonts-common gnu-free-mono-fonts gnu-free-sans-fonts gnu-free-serif-fonts

          yum install -q -y pulseaudio pulseaudio-utils
          sed -i '/^\[daemon\]/a WaylandEnable=false' /etc/gdm/custom.conf

          # Firefox
          amazon-linux-extras install -y firefox

          # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html
          rpm --import https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY

          # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html#linux-server-install
          if (uname -a | grep x86 1>/dev/null); then
            wget -4 -nv https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el7-x86_64.tgz
            tar -xvzf nice-dcv-el7-x86_64.tgz && cd nice-dcv-*-el7-x86_64
          else
            wget -4 -nv https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el7-aarch64.tgz
            tar -xvzf nice-dcv-el7-aarch64.tgz && cd nice-dcv-*-el7-aarch64
          fi

          yum install -q -y ./nice-dcv-server-*.rpm
          yum install -q -y ./nice-dcv-web-viewer-*.rpm
          yum install -q -y ./nice-xdcv-*.rpm

          # https://docs.aws.amazon.com/dcv/latest/adminguide/enable-quic.html
          cp /etc/dcv/dcv.conf /etc/dcv/dcv.conf."`date +"%Y-%m-%d"`"
          sed -i "s/^#enable-quic-frontend=true/enable-quic-frontend=true/g" /etc/dcv/dcv.conf

          # session storage: https://docs.aws.amazon.com/dcv/latest/userguide/using-transfer.html
          # https://docs.aws.amazon.com/dcv/latest/adminguide/managing-sessions-start.html#managing-sessions-start-manual
          cat << EoF > /etc/systemd/system/dcv-virtual-session.service
          [Unit]
          Description=Create DCV virtual session
          After=default.target network.target

          [Service]
          ExecStart=/opt/dcv-virtual-session.sh

          [Install]
          WantedBy=default.target
          EoF

          cat << EoF > /opt/dcv-virtual-session.sh
          #!/bin/bash
          dcvUser=ec2-user
          while true;
          do
            if (/usr/bin/dcv list-sessions | grep \$dcvUser 1>/dev/null); then
              sleep 5
            else
              /usr/bin/dcv create-session \$dcvUser --owner \$dcvUser --storage-root /home/\$dcvUser
              /usr/bin/dcv list-sessions
            fi
          done
          EoF
          chmod +x /opt/dcv-virtual-session.sh

          cd /tmp/cfn

          # https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
          yum remove awscli -y
          if (uname -a | grep x86 1>/dev/null); then
            curl -s https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
          else
            curl -s https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip
          fi
          unzip -q -o awscliv2.zip
          ./aws/install -b /usr/bin
          echo "export AWS_CLI_AUTO_PROMPT=on-partial" >> /home/ec2-user/.bashrc

          # DCV update script
          cat << EoF > /home/ec2-user/update-dcv
          #!/bin/bash
          cd /tmp
          if (uname -a | grep x86 1>/dev/null) then
            rm -f nice-dcv-el7-x86_64.tgz
            wget https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el7-x86_64.tgz
            tar -xvzf nice-dcv-el7-x86_64.tgz && cd nice-dcv-*-el7-x86_64
          else
            rm -f nice-dcv-el7-aarch64.tgz
            wget https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el7-aarch64.tgz
            tar -xvzf nice-dcv-el7-aarch64.tgz && cd nice-dcv-*-el7-aarch64
          fi
          sudo dcv close-session ec2-user
          sudo systemctl stop dcvserver dcv-virtual-session
          sudo yum install -y ./nice-dcv-server-*.rpm
          sudo yum install -y ./nice-dcv-web-viewer-*.rpm
          sudo yum install -y ./nice-xdcv-*.rpm
          sudo sed -i "s/^#enable-quic-frontend=true/enable-quic-frontend=true/g" /etc/dcv/dcv.conf
          sudo systemctl restart dcvserver dcv-virtual-session
          EoF
          chmod +x /home/ec2-user/update-dcv
          chown ec2-user:ec2-user /home/ec2-user/update-dcv

          # AWS CLI update script
          cat << EoF > /home/ec2-user/update-awscli
          #!/bin/bash
          cd /tmp
          rm -f awscliv2.zip
          if (uname -a | grep x86 1>/dev/null); then
            curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
          else
            curl https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip
          fi
          unzip -q -o awscliv2.zip
          sudo ./aws/install --update -b /usr/bin
          EoF
          chmod +x /home/ec2-user/update-awscli
          chown ec2-user:ec2-user /home/ec2-user/update-awscli

          # MountPoint-S3: https://github.com/awslabs/mountpoint-s3
          if (uname -a | grep x86 1>/dev/null); then
            wget -4 -nv https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.rpm
          else
            wget -4 -nv https://s3.amazonaws.com/mountpoint-s3-release/latest/arm64/mount-s3.rpm
          fi
          yum install -q -y ./mount-s3.rpm

          # Mountpoint update script
          cat << EoF > /home/ec2-user/update-mountpoint-s3
          #!/bin/bash
          cd /tmp
          if (uname -a | grep x86 1>/dev/null); then
            wget https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.rpm
          else
            wget https://s3.amazonaws.com/mountpoint-s3-release/latest/arm64/mount-s3.rpm
          fi
          sudo yum install -y ./mount-s3.rpm
          EoF
          chmod +x /home/ec2-user/update-mountpoint-s3
          chown ec2-user:ec2-user /home/ec2-user/update-mountpoint-s3

          # PHP install
          amazon-linux-extras enable ${phpVersion}
          yum clean metadata
          yum install -q -y php-{cli,fpm,opcache}
          yum install -q -y php-{mysqlnd,pgsql,pdo}
          yum install -q -y php-{xml,soap,ldap,intl}
          yum install -q -y php-{mbstring,bcmath,gd}
          yum remove -y mod_php

          systemctl enable --now php-fpm
          systemctl stop php-fpm

          # PHP.INI
          cp /etc/php.ini /etc/php.ini."`date +"%Y-%m-%d"`"

          # https://www.php.net/manual/en/opcache.configuration.php
          sed -i "/^;opcache.enable_cli/a opcache.enable_cli=1" /etc/php.ini
          sed -i "/^; max_input_vars/a max_input_vars=5000" /etc/php.ini

          cp /etc/php.d/10-opcache.ini /etc/php.d/10-opcache.ini."`date +"%Y-%m-%d"`"
          sed -i '1 i\opcache.enable=1\nopcache.jit=1255\nopcache.jit_buffer_size=100M' /etc/php.d/10-opcache.ini
          sed -i '1 i\opcache.enable_cli=1' /etc/php.d/10-opcache.ini

          sed -i "/^;max_input_vars/a max_input_vars=5000" /etc/php.ini
          sed -i 's/memory_limit =.*/memory_limit = 4096M/' /etc/php.ini
          sed -i 's/upload_max_filesize =.*/upload_max_filesize = 16M/' /etc/php.ini
          sed -i 's/post_max_size =.*/post_max_size = 16M/' /etc/php.ini

          yum install -q -y php-devel php-pear gcc

          # Redis & Memcached
          amazon-linux-extras install -y redis6 memcached1.5
          systemctl enable --now redis memcached

          # php-igbinary: https://pecl.php.net/package/igbinary
          pecl install igbinary
          echo 'extension=igbinary.so' > /etc/php.d/30-igbinary.ini

          # php-imagick: https://pecl.php.net/package/imagick
          yum install -q -y ImageMagick-devel
          /usr/bin/yes | pecl install imagick
          echo 'extension=imagick.so' > /etc/php.d/25-imagick.ini

          # php-msgpack: https://pecl.php.net/package/msgpack
          pecl install msgpack
          echo 'extension=msgpack.so' > /etc/php.d/30-msgpack.ini

          # php-redis: https://pecl.php.net/package/redis
          yum install -q -y redis-devel libzstd-devel liblzf-devel
          /usr/bin/yes | pecl install redis
          echo 'extension=redis.so' > /etc/php.d/41-redis.ini

          # php-memcached: https://pecl.php.net/package/memcached
          yum install -q -y memcached-devel libmemcached-devel zlib-devel
          /usr/bin/yes 'no'| pecl install memcached
          echo 'extension=memcached.so' > /etc/php.d/41-memcached.ini

          # libsodium: https://pecl.php.net/package/libsodium
          wget -4 -nv https://download.libsodium.org/libsodium/releases/LATEST.tar.gz
          tar -xzf LATEST.tar.gz
          cd libsodium-stable
          ./configure
          make
          make install
          pecl install -f libsodium
          echo 'extension=sodium.so' > /etc/php.d/50-sodium.ini

          # https://www.php.net/manual/en/class.sessionhandler.php
          sed -i "s/^php_value\[session.save_handler/;&/" /etc/php-fpm.d/www.conf
          sed -i "/^;php_value\[session.save_handler/a php_value[session.save_handler] = redis" /etc/php-fpm.d/www.conf
          sed -i "s/^php_value\[session.save_path/;&/" /etc/php-fpm.d/www.conf
          sed -i '/^;php_value\[session.save_path/a php_value[session.save_path] = tcp://127.0.0.1:6379' /etc/php-fpm.d/www.conf

          systemctl restart php-fpm

          # EPEL
          amazon-linux-extras install -y epel
          yum install -q -y composer

          # Certbot
          yum install -q -y certbot
          yum install -q -y python2-certbot-dns-route53

          # Web server: Apache or Nginx
          export WEB="${webOption}"
          case $WEB in
            Apache)
              yum install -q -y python2-certbot-apache
              yum install -q -y httpd mod_ssl mod_fcgid
              systemctl enable httpd

              cp /etc/httpd/conf.modules.d/00-mpm.conf /etc/httpd/conf.modules.d/00-mpm.conf."`date +"%Y-%m-%d"`"
              # Apache MPM event: https://httpd.apache.org/docs/2.4/mod/event.html
              sed -i "s/^LoadModule mpm_prefork_module/#&/" /etc/httpd/conf.modules.d/00-mpm.conf
              sed -i "/^#LoadModule mpm_event_module/a LoadModule mpm_event_module modules/mod_mpm_event.so" /etc/httpd/conf.modules.d/00-mpm.conf

              cp /etc/httpd/conf.d/ssl.conf /etc/httpd/conf.d/ssl.conf."`date +"%Y-%m-%d"`"
              # Harden TLS
              sed -i "s/^SSLProtocol/#&/" /etc/httpd/conf.d/ssl.conf
              sed -i "/^#SSLProtocol/a SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1" /etc/httpd/conf.d/ssl.conf
              sed -i "s/^SSLCipherSuite/#&/" /etc/httpd/conf.d/ssl.conf
              sed -i "/^#SSLCipherSuite RC4/a SSLCipherSuite  ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256" /etc/httpd/conf.d/ssl.conf

              # virtual host: for Certbot
              cat << EoF > /etc/httpd/conf.d/www.conf
          <VirtualHost *:80>
            ServerAdmin webmaster@localhost
            DocumentRoot /var/www/html
          </VirtualHost>
          EoF

              systemctl restart httpd
              ;;
            Nginx)
              yum install -q -y python2-certbot-nginx
              amazon-linux-extras install -y nginx1
              systemctl enable nginx

              cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf."`date +"%Y-%m-%d"`"
              # enable sites-enabled and sites-available folders
              mkdir -p /etc/nginx/sites-enabled
              mkdir -p /etc/nginx/sites-available
              cp /etc/nginx/nginx.conf /etc/nginx/sites-available/default
              ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default

              # nginx.conf: comment out http site
              sed -i "38,55s/^/##/g" /etc/nginx/nginx.conf
              sed -i "/^http/a \    \include /etc/nginx/sites-enabled/*;" /etc/nginx/nginx.conf

              # build sites-available/default config
              sed -i "1,36s/^/#/g" /etc/nginx/sites-available/default
              sed -i "83,84s/^/#/g" /etc/nginx/sites-available/default
              sed -i "/^#/d" default

              # default: enable HTTPS
              sed -i "58,82s/^#//g" /etc/nginx/sites-available/default
              sed -i "s/ssl_ciphers/#&/" /etc/nginx/sites-available/default
              sed -i "/#ssl_ciphers/a \        \ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;" /etc/nginx/sites-available/default

              # default: dummy cert
              mkdir -p /etc/pki/tls/nginx
              cd /etc/pki/tls/nginx
              /etc/pki/tls/certs/make-dummy-cert server.pem
              cd /tmp/cfn
              sed -i "s/ssl_certificate/#&/" /etc/nginx/sites-available/default
              sed -i "/#ssl_certificate /a \        \ssl_certificate \"/etc/pki/tls/nginx/server.pem\";" /etc/nginx/sites-available/default
              sed -i "s/ssl_certificate_key /#&/" /etc/nginx/sites-available/default
              sed -i "/#ssl_certificate_key/a \        \ssl_certificate_key \"/etc/pki/tls/nginx/server.pem\";" /etc/nginx/sites-available/default
              
              systemctl restart nginx
              ;;
          esac

          # Database: MySQL, MariaDB or none
          export DB="${databaseOption}"
          case $DB in
            MySQL)
              yum install -y https://dev.mysql.com/get/mysql80-community-release-el7-9.noarch.rpm
              yum install -q -y mysql-community-server
              systemctl enable --now mysqld
              ;;
            MariaDB)
              amazon-linux-extras install -y mariadb10.5
              systemctl enable --now mariadb
              ;;
            PostgreSQL)
              amazon-linux-extras enable postgresql14
              yum clean metadata
              yum install -y postgresql postgresql-server
              /usr/bin/postgresql-setup --initdb
              systemctl enable --now postgresql
              ;;
          esac

          # NFS client
          yum install -q -y amazon-efs-utils

          # cachefilesd
          yum install -q -y cachefilesd
          systemctl enable --now cachefilesd

          # Lustre: https://docs.aws.amazon.com/fsx/latest/LustreGuide/install-lustre-client.html
          amazon-linux-extras install -y lustre

          # CodeDeploy agent: https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-linux.html
          yum install -q -y ruby
          wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto

          # CloudWatch agent: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-on-EC2-Instance.html
          yum install -q -y amazon-cloudwatch-agent

          cat << EoF > /opt/aws/amazon-cloudwatch-agent/bin/config.json
          {
            "agent": {
              "metrics_collection_interval": 60,
              "run_as_user": "cwagent"
            },
            "metrics": {
              "aggregation_dimensions": [
                [
                  "InstanceId"
                ]
              ],
              "append_dimensions": {
                "AutoScalingGroupName": "\${!aws:AutoScalingGroupName}",
                "ImageId": "\${!aws:ImageId}",
                "InstanceId": "\${!aws:InstanceId}",
                "InstanceType": "\${!aws:InstanceType}"
              },
              "metrics_collected": {
                "disk": {
                  "measurement": [
                    "used_percent"
                  ],
                  "metrics_collection_interval": 60,
                    "resources": [
                      "/"
                    ]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent"
                  ],
                  "metrics_collection_interval": 60
                },                
                "diskio": {
                  "measurement": [
                    "io_time"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "nvme0n1"
                  ]
                },
                "cpu": {
                  "measurement": [
                    "cpu_usage_idle",
                    "cpu_usage_iowait",
                    "cpu_usage_user",
                    "cpu_usage_system"
                  ],
                  "metrics_collection_interval": 60
                }
              }
            }
          }
          EoF
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
          systemctl enable --now amazon-cloudwatch-agent

          # yum-cron
          yum install -q -y yum-cron
          sed -i 's/apply_updates = no/apply_updates = yes/g' /etc/yum/yum-cron.conf
          systemctl enable --now yum-cron

          # text console: DCV virtual sessions only
          systemctl isolate multi-user.target
          systemctl set-default multi-user.target

          systemctl daemon-reload
          systemctl enable --now dcvserver dcv-virtual-session.service

          # cfn-init completed so signal success or not
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Ref ec2Name
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: GitHub
          Value: https://github.com/aws-samples/ec2-lamp-server

  elasticIP:
    Condition: useElasticIP
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref ec2Instance
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - ${ec2Name}"
        - Key: GitHub
          Value: https://github.com/aws-samples/ec2-lamp-server

Outputs:
  EC2Instance:
    Description: EC2 instance console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/home?region=${AWS::Region}#Instances:search=${ec2Instance}"

  SSMsessionManager:
    Description: SSM Session Manager login ("sudo passwd ec2-user" to change password)
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${ec2Instance}"

  DCVwebConsole:
    Description: NICE DCV web browser client (login as ec2-user)
    Value:
      !If [
        displayPublicIP,
        !Sub "https://${ec2Instance.PublicIp}:8443",
        !Sub "https://${ec2Instance.PrivateIp}:8443",
      ]

  WebUrl:
    Description: Website
    Value:
      !If [
        displayPublicIP,
        !Sub "http://${ec2Instance.PublicIp}",
        !Sub "http://${ec2Instance.PrivateIp}",
      ]
