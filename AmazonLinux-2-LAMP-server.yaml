AWSTemplateFormatVersion: 2010-09-09
Description: Amazon Linux 2  ( https://github.com/aws-samples/ec2-lamp-server )
Transform: "AWS::LanguageExtensions"

Metadata:
  License:
    Description: >
      Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
      SPDX-License-Identifier: MIT-0

      Permission is hereby granted, free of charge, to any person obtaining a copy of this
      software and associated documentation files (the "Software"), to deal in the Software
      without restriction, including without limitation the rights to use, copy, modify,
      merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
      permit persons to whom the Software is furnished to do so.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
      INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
      PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
      OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2
        Parameters:
          - ec2Name
          - ec2KeyPair
          - processorArchitecture
          - instanceType
      - Label:
          default: Network
        Parameters:
          - vpcID
          - subnetID
          - displayPublicIP
          - assignStaticIP
      - Label:
          default: Remote administration
        Parameters:
          - ingressIPv4
          - ingressIPv6
      - Label:
          default: LAMP
        Parameters:
          - webOption
          - phpVersion
          - databaseOption
          - s3BucketName
          - r53ZoneID
      - Label:
          default: EBS volume
        Parameters:
          - volumeSize
          - volumeType
    ParameterLabels:
      processorArchitecture:
        default: "Processor architecture"
      instanceType:
        default: "Instance type (x86_64 or arm64)"
      ec2Name:
        default: "Instance name"
      ec2KeyPair:
        default: "Keypair name"
      volumeSize:
        default: "Volume size (GiB)"
      volumeType:
        default: "Volume type"
      vpcID:
        default: "VPC with internet connectivity"
      subnetID:
        default: "Subnet with internet connectivity"
      displayPublicIP:
        default: "EC2 in public subnet with public IP assigned?"
      assignStaticIP:
        default: "[Elastic IP] Assign static public internet IPv4 address?"
      ingressIPv4:
        default: "Allowed IPv4 prefix to SSH and NICE DCV"
      ingressIPv6:
        default: "Allowed IPv6 prefix to SSH and NICE DCV"
      webOption:
        default: "Web server to install"
      databaseOption:
        default: "Database server to install"
      phpVersion:
        default: "PHP version to install"
      s3BucketName:
        default: "(optional) S3 bucket name to grant access to"
      r53ZoneID:
        default: "(optional) Route 53 hosted zone ID to grant access to"

Parameters:
  processorArchitecture:
    Type: String
    Description: https://aws.amazon.com/ec2/graviton/
    AllowedValues:
      - Intel/AMD (x86_64)
      - Graviton (arm64)
    Default: Graviton (arm64)
  instanceType:
    Type: String
    Description: "https://console.aws.amazon.com/ec2/#InstanceTypes"
    Default: t4g.large

  ec2Name:
    Type: String
    #Description: EC2 instance name
    Default: AmazonLinux-2-LAMP-Stack
  ec2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "https://console.aws.amazon.com/ec2/#KeyPairs"
    ConstraintDescription: Specify a key pair
    AllowedPattern: ".+"
  volumeSize:
    Type: Number
    #Description: Volume size in GiBs
    MinValue: 10
    MaxValue: 16384
    Default: 30
  volumeType:
    Type: String
    Description: https://aws.amazon.com/ebs/general-purpose/
    AllowedValues:
      - "gp3"
      - "gp2"
    Default: "gp3"

  vpcID:
    Type: AWS::EC2::VPC::Id
    Description: "https://console.aws.amazon.com/vpcconsole/home#vpcs:"
    ConstraintDescription: Specify a valid value
    AllowedPattern: ".+"
  subnetID:
    Type: AWS::EC2::Subnet::Id
    Description: "https://console.aws.amazon.com/vpcconsole/home#subnets:"
    ConstraintDescription: Specify a valid value
    AllowedPattern: ".+"
  assignStaticIP:
    Type: String
    Description: "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html"
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
  displayPublicIP:
    Type: String
    Description: "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses"
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"

  ingressIPv4:
    Type: String
    Description: "e.g. 1.2.3.4/32, get your source IP from https://checkip.amazonaws.com "
    Default: 0.0.0.0/0
  ingressIPv6:
    Type: String
    Description: "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#ipv6-addressing"
    Default: ::/0

  webOption:
    Type: String
    #Description: Web server to install
    AllowedValues:
      - "Apache"
      - "Nginx"
      - "none"
    Default: "Apache"
  databaseOption:
    Type: String
    #Description: Database to install
    AllowedValues:
      - "MariaDB"
      - "MySQL"
      - "PostgreSQL"
      - "none"
    Default: "MariaDB"
  phpVersion:
    Type: String
    #Description: PHP version to install
    AllowedValues:
      - "php8.1"
      - "php8.2"
      - "none"
    Default: "php8.2"
  s3BucketName:
    Type: String
    Description: "https://console.aws.amazon.com/s3/buckets"
    Default: ""
  r53ZoneID:
    Type: String
    Description: "https://console.aws.amazon.com/route53/v2/hostedzones"
    Default: ""

Conditions:
  useARM64: !Equals [!Ref processorArchitecture, "Graviton (arm64)"]
  useElasticIP: !Equals [!Ref assignStaticIP, "Yes"]
  displayPublicIP: !Equals [!Ref displayPublicIP, "Yes"]
  hasS3Bucket: !Not [!Equals [!Ref s3BucketName, ""]]
  hasR53Zone: !Not [!Equals [!Ref r53ZoneID, ""]]
  hasEIC:
    !Not [
      !Equals [
        !FindInMap [
          EICprefixMap,
          !Ref AWS::Region,
          "IpPrefix",
          DefaultValue: 127.0.0.1/32,
        ],
        "127.0.0.1/32",
      ],
    ]
  createEICsg: !And [!Condition hasEIC, !Condition displayPublicIP]

Mappings:
  EICprefixMap: # EC2 instance connect: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-prerequisites.html#ec2-instance-connect-setup-security-group
    af-south-1:
      IpPrefix: 13.244.121.196/30
    ap-east-1:
      IpPrefix: 43.198.192.104/29
    ap-northeast-1:
      IpPrefix: 3.112.23.0/29
    ap-northeast-2:
      IpPrefix: 13.209.1.56/29
    ap-northeast-3:
      IpPrefix: 15.168.105.160/29
    ap-south-1:
      IpPrefix: 13.233.177.0/29
    ap-south-2:
      IpPrefix: 18.60.252.248/29
    ap-southeast-1:
      IpPrefix: 3.0.5.32/29
    ap-southeast-2:
      IpPrefix: 13.239.158.0/29
    ap-southeast-3:
      IpPrefix: 43.218.193.64/29
    ap-southeast-4:
      IpPrefix: 16.50.248.80/29
    ca-central-1:
      IpPrefix: 35.183.92.176/29
    cn-north-1:
      IpPrefix: 43.196.20.40/29
    cn-northwest-1:
      IpPrefix: 43.192.155.8/29
    eu-central-1:
      IpPrefix: 3.120.181.40/29
    eu-central-2:
      IpPrefix: 16.63.77.8/29
    eu-north-1:
      IpPrefix: 13.48.4.200/30
    eu-south-1:
      IpPrefix: 15.161.135.164/30
    eu-south-2:
      IpPrefix: 18.101.90.48/29
    eu-west-1:
      IpPrefix: 18.202.216.48/29
    eu-west-2:
      IpPrefix: 3.8.37.24/29
    eu-west-3:
      IpPrefix: 35.180.112.80/29
    il-central-1:
      IpPrefix: 51.16.183.224/29
    me-central-1:
      IpPrefix: 3.29.147.40/29
    me-south-1:
      IpPrefix: 16.24.46.56/29
    sa-east-1:
      IpPrefix: 18.228.70.32/29
    us-east-1:
      IpPrefix: 18.206.107.24/29
    us-east-2:
      IpPrefix: 3.16.146.0/29
    us-gov-east-1:
      IpPrefix: 18.252.4.0/30
    us-gov-west-1:
      IpPrefix: 15.200.28.80/30
    us-west-1:
      IpPrefix: 13.52.6.112/29
    us-west-2:
      IpPrefix: 18.237.140.160/29

Resources:
  instanceIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: dcvLicensing
          PolicyDocument: # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-license.html
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:${AWS::Partition}:s3:::dcv-license.${AWS::Region}/*"
        - PolicyName: MountPointS3Access
          PolicyDocument: # MountPoint for S3: https://github.com/awslabs/mountpoint-s3/blob/main/doc/CONFIGURATION.md
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3:::${bucketName}"
                  - bucketName:
                      !If [hasS3Bucket, !Ref s3BucketName, "DOC-EXAMPLE-BUCKET"]
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:AbortMultipartUpload
                  - s3:DeleteObject
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3:::${bucketName}/*"
                  - bucketName:
                      !If [hasS3Bucket, !Ref s3BucketName, "DOC-EXAMPLE-BUCKET"]
        - PolicyName: MountPointS3ExpressAccess
          PolicyDocument: # MountPoint for S3: https://github.com/awslabs/mountpoint-s3/blob/main/doc/CONFIGURATION.md
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3express:CreateSession
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3express:${AWS::Region}:${AWS::AccountId}:bucket/${bucketName}--az_id--x-s3"
                  - bucketName:
                      !If [hasS3Bucket, !Ref s3BucketName, "DOC-EXAMPLE-BUCKET"]
        - PolicyName: Route53CertbotAccess
          PolicyDocument: # Certbot dns_route53 : https://certbot-dns-route53.readthedocs.io/en/stable/
            Version: "2012-10-17"
            Statement: # https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/specifying-rrset-conditions.html
              - Effect: Allow
                Action:
                  - route53:ListHostedZones
                  - route53:GetChange
                Resource: "*"
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource: !Sub
                  - "arn:${AWS::Partition}:route53:::hostedzone/${hostedZone}"
                  - hostedZone:
                      !If [hasR53Zone, !Ref r53ZoneID, "EXAMPLE-ZONE-ID"]
                Condition:
                  ForAllValues:StringEquals:
                    "route53:ChangeResourceRecordSetsRecordTypes": ["TXT"]
                  ForAllValues:StringLike:
                    "route53:ChangeResourceRecordSetsNormalizedRecordNames":
                      ["_acme-challenge.*"]
        - PolicyName: Route53UpdaterAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement: # https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/specifying-rrset-conditions.html
              - Effect: Allow
                Action:
                  - route53:ListHostedZones
                  - route53:GetChange
                Resource: "*"
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource: !Sub
                  - "arn:${AWS::Partition}:route53:::hostedzone/${hostedZone}"
                  - hostedZone:
                      !If [hasR53Zone, !Ref r53ZoneID, "EXAMPLE-ZONE-ID"]
                Condition:
                  ForAllValues:StringEquals:
                    "route53:ChangeResourceRecordSetsRecordTypes": ["A", "AAAA"]
                  ForAllValues:StringLike:
                    "route53:ChangeResourceRecordSetsNormalizedRecordNames":
                      ["site.example.com"]
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeployLimited"
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: GitHub
          Value: https://github.com/aws-samples/ec2-lamp-server

  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref instanceIamRole

  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound DCV, SSH, HTTP, HTTPS
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - Description: SSH (IPv4)
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ingressIPv4
        - Description: SSH (IPv6)
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIpv6: !Ref ingressIPv6
        - Description: NICE DCV (IPv4)
          IpProtocol: "tcp"
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref ingressIPv4
        - Description: NICE DCV (IPv6)
          IpProtocol: "tcp"
          FromPort: 8443
          ToPort: 8443
          CidrIpv6: !Ref ingressIPv6
        - Description: NICE DCV QUIC (IPv4)
          IpProtocol: "udp"
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref ingressIPv4
        - Description: NICE DCV QUIC (IPv6)
          IpProtocol: "udp"
          FromPort: 8443
          ToPort: 8443
          CidrIpv6: !Ref ingressIPv6
        - Description: HTTP (IPv4)
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: HTTP (IPv6)
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
        - Description: HTTPS (IPv4)
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - Description: HTTPS (IPv6)
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
      SecurityGroupEgress:
        - Description: Allow all outbound traffic (IPv4)
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
        - Description: Allow all outbound traffic (IPv6)
          IpProtocol: "-1"
          CidrIpv6: ::/0
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - ${ec2Name}"
        - Key: GitHub
          Value: https://github.com/aws-samples/ec2-lamp-server

  securityGroupForEIC:
    Condition: createEICsg
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow in-browser SSH via EC2 Instance Connect
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - Description: SSH from EIC IP
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp:
            !FindInMap [
              EICprefixMap,
              !Ref AWS::Region,
              "IpPrefix",
              DefaultValue: 127.0.0.1/32,
            ]
      SecurityGroupEgress:
        - Description: Allow ICMP to EIC IP
          IpProtocol: "icmp"
          FromPort: -1
          ToPort: -1
          CidrIp:
            !FindInMap [
              EICprefixMap,
              !Ref AWS::Region,
              "IpPrefix",
              DefaultValue: 127.0.0.1/32,
            ]
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - ${ec2Name} - EIC"
        - Key: GitHub
          Value: https://github.com/aws-samples/ec2-lamp-server

  ec2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT90M
    Metadata:
      Comment: Install Update files
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - 00_setup
          php_install:
            - 01_php_install
        00_setup: # in the following order: packages, groups, users, sources, files, commands, and then services.
          files:
            "/home/ec2-user/update-dcv":
              content: |
                #!/bin/bash
                cd /tmp
                sudo dcv close-session ec2-user                
                if (arch | grep -q x86); then
                  rm -f nice-dcv-el7-x86_64.tgz
                  wget https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el7-x86_64.tgz
                  tar -xvzf nice-dcv-el7-x86_64.tgz && cd nice-dcv-*-el7-x86_64
                else
                  rm -f nice-dcv-el7-aarch64.tgz
                  wget https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el7-aarch64.tgz
                  tar -xvzf nice-dcv-el7-aarch64.tgz && cd nice-dcv-*-el7-aarch64
                fi
                sudo systemctl stop dcvserver
                sudo yum install -y ./nice-dcv-server-*.rpm
                sudo yum install -y ./nice-dcv-web-viewer-*.rpm
                sudo yum install -y ./nice-xdcv-*.rpm
                sudo yum install -y ./nice-dcv-gltest-*.rpm
                sudo systemctl restart dcvserver
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
            "/home/ec2-user/update-awscli":
              content: |
                #!/bin/bash
                cd /tmp
                rm -f awscliv2.zip
                if (arch | grep -q x86); then
                  curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
                else
                  curl https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip
                fi
                unzip -q -o awscliv2.zip
                /usr/bin/aws --version
                sudo ./aws/install --update -b /usr/bin
                /usr/bin/aws --version
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
            "/home/ec2-user/update-mountpoint-s3":
              content: |
                #!/bin/bash
                cd /tmp
                if (uname -a | grep -q x86); then
                  wget -4 https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.rpm
                else
                  wget -4 https://s3.amazonaws.com/mountpoint-s3-release/latest/arm64/mount-s3.rpm
                fi
                sudo yum install -y ./mount-s3.rpm
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
            "/etc/systemd/system/mount-s3-helper.service":
              content: |
                # https://github.com/awslabs/mountpoint-s3/blob/main/doc/CONFIGURATION.md#automatically-mounting-an-s3-bucket-at-boot
                [Unit]
                Description=Mountpoint for S3 helper
                Wants=network.target

                [Service]
                Type=forking
                User=root
                Group=root
                ExecStart=/opt/mount-s3-helper.sh
                ExecStop=/usr/bin/fusermount -u /mnt/s3-bucket-mount

                [Install]
                WantedBy=remote-fs.target
              mode: "000644"
              owner: "root"
              group: "root"
            "/opt/mount-s3-helper.sh":
              content: !Sub
                - |
                  #!/bin/bash
                  S3_BUCKET_NAME=${S3-BUCKET-NAME}
                  MOUNT_FOLDER=/mnt/s3-bucket-mount
                  USER=ec2-user
                  GROUP=apache

                  USERID=$(cat /etc/passwd | grep ^$USER | cut -d":" -f 3)
                  GROUPID=$(cat /etc/group | grep ^$GROUP | cut -d":" -f 3)

                  mkdir -p $MOUNT_FOLDER
                  /usr/bin/mount-s3 --uid $USERID --gid $GROUPID --allow-overwrite --allow-delete --allow-other $S3_BUCKET_NAME $MOUNT_FOLDER
                - S3-BUCKET-NAME:
                    !If [hasS3Bucket, !Ref s3BucketName, "DOC-EXAMPLE-BUCKET"]
              mode: "000744"
              owner: "root"
              group: "root"
            "/etc/systemd/system/route53-updater.service":
              content: |
                [Unit]
                Description=Route53 DNS updater
                After=network.target

                [Service]
                Type=oneshot
                ExecStart=/opt/route53-updater.sh
                RemainAfterExit=true

                [Install]
                WantedBy=multi-user.target
              mode: "000644"
              owner: "root"
              group: "root"
            "/opt/route53-updater.sh":
              content: !Sub
                - |
                  #!/bin/bash
                  R53_ZONE_ID=${R53-ZONE-ID}
                  DNS_ENTRY=site.example.com

                  AWS_IP=`curl -s checkip.amazonaws.com`
                  aws route53 change-resource-record-sets --cli-input-json '{
                  "HostedZoneId": "/hostedzone/'$R53_ZONE_ID'",
                  "ChangeBatch": {
                      "Comment": "Stack ${AWS::StackName}",
                      "Changes": [
                          {
                            "Action": "UPSERT",
                            "ResourceRecordSet": {
                                "Name": "'$DNS_ENTRY'",
                                "Type": "A",
                                "TTL": 60,
                              "ResourceRecords": [
                                {
                                  "Value": "'$AWS_IP'"
                                }
                              ]
                            }
                          }
                      ]
                  }}'
                - R53-ZONE-ID:
                    !If [hasR53Zone, !Ref r53ZoneID, "EXAMPLE-ZONE-ID"]
              mode: "000755"
              owner: "root"
              group: "root"
            "/home/ec2-user/update-certbot":
              content: |
                #!/bin/bash
                sudo /opt/certbot/bin/pip install --upgrade pip
                sudo /opt/certbot/bin/pip install --upgrade certbot
                sudo /opt/certbot/bin/pip install --upgrade certbot-dns-route53
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
            "/etc/systemd/system/dcv-virtual-session.service":
              content: |
                [Unit]
                Description=Create DCV virtual session
                After=default.target network.target

                [Service]
                ExecStart=/opt/dcv-virtual-session.sh

                [Install]
                WantedBy=default.target
              mode: "000644"
              owner: "root"
              group: "root"
            "/opt/dcv-virtual-session.sh":
              content: |
                #!/bin/bash
                dcvUsers=( "ec2-user" )
                while true;
                do
                  for dcvUser in "${dcvUsers[@]}"
                  do
                    if (! /usr/bin/dcv list-sessions | grep -q $dcvUser); then
                      case $dcvUser in
                        root)
                          /usr/bin/dcv create-session $dcvUser --owner root --storage-root /root
                          ;;
                        *)
                          /usr/bin/dcv create-session $dcvUser --owner $dcvUser --storage-root /home/$dcvUser
                          ;;
                      esac
                    fi
                  done
                  /usr/bin/dcv list-sessions
                  sleep 5
                done
              mode: "000755"
              owner: "root"
              group: "root"
            "/etc/systemd/system/dcv-post-reboot.service":
              content: |
                [Unit]
                Description=Post install tasks
                After=default.target network.target

                [Service]
                ExecStart=/opt/dcv-post-reboot.sh

                [Install]
                WantedBy=default.target
              mode: "000644"
              owner: "root"
              group: "root"
            "/opt/dcv-post-reboot.sh":
              content: !Sub |
                #!/bin/bash
                sysctl -w net.ipv6.conf.all.disable_ipv6=1
                sysctl -w net.ipv6.conf.default.disable_ipv6=1

                # USB remotization: https://docs.aws.amazon.com/dcv/latest/adminguide/manage-usb-remote.html
                #yum install -q -y kernel-devel-$(uname -r)
                #yum install -q -y usbutils
                # dcvusbdriverinstaller --quiet

                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region}
                sysctl -w net.ipv6.conf.all.disable_ipv6=0
                sysctl -w net.ipv6.conf.default.disable_ipv6=0

                systemctl enable dcv-virtual-session && systemctl restart dcv-virtual-session
                systemctl enable dcvserver && systemctl restart dcvserver

                rm -f /etc/systemd/system/dcv-post-reboot.service
                rm -f ${!0}
                systemctl daemon-reload
              mode: "000755"
              owner: "root"
              group: "root"
            "/opt/aws/amazon-cloudwatch-agent/bin/config.json":
              content: |
                {
                  "agent": {
                    "metrics_collection_interval": 60,
                    "run_as_user": "cwagent"
                  },
                  "metrics": {
                    "aggregation_dimensions": [
                      [
                        "InstanceId"
                      ]
                    ],
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "disk": {
                        "measurement": [
                          "used_percent"
                        ],
                        "metrics_collection_interval": 60,
                          "resources": [
                            "/"
                          ]
                      },
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ],
                        "metrics_collection_interval": 60
                      },                
                      "diskio": {
                        "measurement": [
                          "io_time"
                        ],
                        "metrics_collection_interval": 60,
                        "resources": [
                          "nvme0n1"
                        ]
                      },
                      "cpu": {
                        "measurement": [
                          "cpu_usage_idle",
                          "cpu_usage_iowait",
                          "cpu_usage_user",
                          "cpu_usage_system"
                        ],
                        "metrics_collection_interval": 60,
                        "totalcpu": false
                      }
                    }
                  },
                  "traces": {
                    "buffer_size_mb": 3,
                    "concurrency": 8,
                    "insecure": false,
                    "traces_collected": {
                      "xray": {
                        "bind_address": "127.0.0.1:2000",
                        "tcp_proxy": {
                          "bind_address": "127.0.0.1:2000"
                        }
                      }
                    }
                  }
                }
              mode: "000644"
              owner: "root"
              group: "root"
            "/usr/lib/systemd/system/certbot-renew.timer":
              content: |
                [Unit]
                Description=This is the timer to set the schedule for automated renewals

                [Timer]
                OnCalendar=*-*-* 00/12:00:00
                RandomizedDelaySec=12hours
                Persistent=true

                [Install]
                WantedBy=timers.target
              mode: "000644"
              owner: "root"
              group: "root"
            "/usr/lib/systemd/system/certbot-renew.service":
              content: |
                [Unit]
                Description=This service automatically renews any certbot certificates found

                [Service]
                EnvironmentFile=/etc/sysconfig/certbot
                Type=oneshot
                ExecStart=/usr/bin/certbot renew --noninteractive --no-random-sleep-on-renew $PRE_HOOK $POST_HOOK $RENEW_HOOK $DEPLOY_HOOK $CERTBOT_ARGS
              mode: "000644"
              owner: "root"
              group: "root"
        01_php_install:
          files:
            "/root/install-php.sh":
              content: !Sub |
                #!/bin/bash
                mkdir -p /tmp/cfn
                cd /tmp/cfn

                export PHP="${phpVersion}"
                case $PHP in
                  none)
                    ;;
                  *)
                    amazon-linux-extras enable ${phpVersion}
                    yum clean metadata
                    yum install -q -y php-{cli,fpm,opcache}
                    yum install -q -y php-{mysqlnd,pgsql,pdo,dba}
                    yum install -q -y php-{xml,soap,ldap,intl}
                    yum install -q -y php-{mbstring,bcmath,gd,enchant,pspell,tidy}
                    yum remove -y mod_php

                    # PHP.INI
                    cp /etc/php.ini /etc/php.ini."`date +"%Y-%m-%d"`"
                    sed -i "/^; max_input_vars/a max_input_vars=5000" /etc/php.ini
                    sed -i 's/memory_limit =.*/memory_limit = 4096M/' /etc/php.ini
                    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 16M/' /etc/php.ini
                    sed -i 's/post_max_size =.*/post_max_size = 16M/' /etc/php.ini

                    cp /etc/php-fpm.d/www.conf /etc/php-fpm.d/www.conf."`date +"%Y-%m-%d"`"
                    # https://www.php.net/manual/en/class.sessionhandler.php
                    sed -i "s/^php_value\[session.save_handler/;&/" /etc/php-fpm.d/www.conf
                    sed -i "/^;php_value\[session.save_handler/a php_value[session.save_handler] = redis" /etc/php-fpm.d/www.conf
                    sed -i "s/^php_value\[session.save_path/;&/" /etc/php-fpm.d/www.conf
                    sed -i '/^;php_value\[session.save_path/a php_value[session.save_path] = tcp://127.0.0.1:6379' /etc/php-fpm.d/www.conf

                    # https://www.php.net/manual/en/opcache.configuration.php
                    cp /etc/php.d/10-opcache.ini /etc/php.d/10-opcache.ini."`date +"%Y-%m-%d"`"
                    sed -i '1 i\opcache.enable=1\nopcache.enable_cli=1\nopcache.jit=1205\nopcache.jit_buffer_size=100M' /etc/php.d/10-opcache.ini
                    # https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.file-cache
                    mkdir -p /var/www/.opcache
                    chown apache:apache /var/www/.opcache
                    sed -i 's/;opcache.file_cache=.*/;opcache.file_cache=\/var\/www\/.opcache/' /etc/php.d/10-opcache.ini

                    # https://www.php.net/manual/en/install.pecl.pear.php
                    yum install -q -y php-devel php-pear gcc
                    pear update-channels
                    pecl update-channels

                    # php-apcu: https://github.com/krakjoe/apcu/blob/master/package.xml
                    yes 'no' | pecl install --configureoptions 'enable-apcu-debug="no"' apcu
                    echo 'extension=apcu.so' > /etc/php.d/42-apcu.ini

                    # php-igbinary: https://pecl.php.net/package/igbinary
                    yes 'no' | pecl install igbinary
                    echo 'extension=igbinary.so' > /etc/php.d/30-igbinary.ini

                    # php-msgpack: https://github.com/msgpack/msgpack-php/blob/master/package.xml
                    yes 'no' | pecl install msgpack
                    echo 'extension=msgpack.so' > /etc/php.d/30-msgpack.ini

                    # php-lzf: https://github.com/php/pecl-file_formats-lzf/blob/master/package.xml
                    yes 'no' | pecl install --configureoptions 'enable-lzf-better-compression="no"' lzf
                    echo 'extension=lzf.so' > /etc/php.d/40-lzf.ini

                    # php-zstd: https://github.com/kjdev/php-ext-zstd/blob/master/package.xml
                    yum install -q -y libzstd-devel
                    yes 'no' | pecl install zstd
                    echo 'extension=zstd.so' > /etc/php.d/40-zstd.ini

                    # php-imagick: https://github.com/Imagick/imagick/blob/master/package.xml
                    yum install -q -y ImageMagick ImageMagick-devel
                    yes 'no' | pecl install -f --configureoptions 'with-imagick="autodetect"' imagick
                    echo 'extension=imagick.so' > /etc/php.d/25-imagick.ini

                    # php-redis: https://github.com/phpredis/phpredis/blob/develop/package.xml
                    yum install -q -y redis-devel lz4-devel
                    yes 'no' | pecl install --configureoptions 'enable-redis-igbinary="yes" enable-redis-lzf="yes" enable-redis-zstd="yes" enable-redis-msgpack="yes" enable-redis-lz4="yes" with-liblz4="yes"' redis
                    echo 'extension=redis.so' > /etc/php.d/41-redis.ini

                    # php-memcached: https://github.com/php-memcached-dev/php-memcached/blob/master/package.xml
                    yum install -q -y memcached-devel libmemcached-devel zlib-devel cyrus-sasl-devel libevent-devel
                    yes 'no' | pecl install --configureoptions 'enable-memcached-igbinary="yes" enable-memcached-msgpack="yes" enable-memcached-json="yes" enable-memcached-protocol="yes" enable-memcached-sasl="yes" enable-memcached-session="yes"' memcached
                    echo 'extension=memcached.so' > /etc/php.d/41-memcached.ini

                    # libsodium: https://github.com/jedisct1/libsodium-php/blob/master/package.xml
                    yum install -q -y php-sodium

                    # php-lz4: https://github.com/kjdev/php-ext-lz4
                    cd /tmp/cfn
                    yum install -q -y git lz4-devel
                    git clone --recursive --depth=1 https://github.com/kjdev/php-ext-lz4.git
                    cd php-ext-lz4
                    phpize
                    ./configure --with-lz4-includedir=/usr
                    make
                    make install
                    echo 'extension=lz4.so' > /etc/php.d/40-lz4.ini

                    cd /tmp/cfn

                    # Composer: https://getcomposer.org/download/
                    yum install -q -y composer
                    if (! which composer); then
                      curl -s -L -O https://getcomposer.org/installer
                      export COMPOSER_HOME=/root && php installer --quiet
                      mv ./composer.phar /usr/local/bin/composer
                    fi

                    systemctl enable php-fpm
                    systemctl restart php-fpm

                    ;;
                esac
              mode: "000755"
              owner: "root"
              group: "root"
          commands:
            install:
              command: "/root/install-php.sh > /var/log/install-php.log"
              ignoreErrors: "true"
    Properties:
      ImageId: # https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-linux-2-ami-kernel-5-10/
        !If [
          useARM64,
          "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-arm64-gp2}}",
          "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2}}",
        ]
      InstanceType: !Ref instanceType
      IamInstanceProfile: !Ref instanceProfile
      KeyName: !Ref ec2KeyPair
      SubnetId: !Ref subnetID
      Monitoring: true
      SecurityGroupIds:
        - !Ref securityGroup
        - !If [createEICsg, !Ref securityGroupForEIC, !Ref AWS::NoValue]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: !Ref volumeType
            VolumeSize: !Ref volumeSize
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          mkdir -p /tmp/cfn
          cd /tmp/cfn

          # disable IPv6 during setup
          sysctl -w net.ipv6.conf.all.disable_ipv6=1
          sysctl -w net.ipv6.conf.default.disable_ipv6=1

          yum clean all
          yum install -q -y deltarpm wget tmux unzip tar curl sed

          export CFN_INIT="/opt/aws/bin/cfn-init"

          $CFN_INIT -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c setup

          # NICE DCV prereq: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html
          yum install -q -y gdm gnome-session gnome-classic-session gnome-session-xsession
          yum install -q -y xorg-x11-server-Xorg xorg-x11-fonts-Type1 xorg-x11-drivers 
          yum install -q -y gnome-terminal gnu-free-fonts-common gnu-free-mono-fonts gnu-free-sans-fonts gnu-free-serif-fonts

          # Microphone redirection: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html
          yum install -q -y pulseaudio pulseaudio-utils
          amazon-linux-extras install -y firefox

          # Disable the Wayland protocol: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html#linux-prereq-wayland
          sed -i '/^\[daemon\]/a WaylandEnable=false' /etc/gdm/custom.conf

          # NICE DCV: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html
          rpm --import https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY
          if (arch | grep -q x86); then
            curl -s -L -O https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el7-x86_64.tgz
            tar -xvzf nice-dcv-el7-x86_64.tgz && cd nice-dcv-*-el7-x86_64
          else
            curl -s -L -O https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el7-aarch64.tgz
            tar -xvzf nice-dcv-el7-aarch64.tgz && cd nice-dcv-*-el7-aarch64
          fi
          yum install -q -y ./nice-dcv-server-*.rpm
          yum install -q -y ./nice-dcv-web-viewer-*.rpm
          yum install -q -y ./nice-xdcv-*.rpm
          yum install -q -y ./nice-dcv-gltest-*.rpm

          # Printer redirection: https://docs.aws.amazon.com/dcv/latest/adminguide/manage-printer.html
          yum install -q -y cups
          GROUP=$(cat /etc/cups/cups-files.conf | grep -oP "SystemGroup\s\K\w+")
          usermod -a -G $GROUP dcv
          systemctl enable cups

          # EPEL: https://docs.fedoraproject.org/en-US/epel/
          amazon-linux-extras install -y epel

          # QUIC: https://docs.aws.amazon.com/dcv/latest/adminguide/enable-quic.html
          cp /etc/dcv/dcv.conf /etc/dcv/dcv.conf."`date +"%Y-%m-%d"`"
          sed -i "s/^#enable-quic-frontend=true/enable-quic-frontend=true/g" /etc/dcv/dcv.conf

          # remove AWSCLI version 1
          yum remove -q -y awscli

          cd /tmp/cfn
          # AWS CLI v2: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
          if (arch | grep -q x86); then
            curl -s https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
          else
            curl -s https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip
          fi
          unzip -q -o awscliv2.zip
          ./aws/install -b /usr/bin
          echo "export AWS_CLI_AUTO_PROMPT=on-partial" >> /home/ec2-user/.bashrc

          # Higher web client max resolution: https://docs.aws.amazon.com/dcv/latest/adminguide/config-param-ref.html
          sed -i "/^\[display/a web-client-max-head-resolution=(4096, 2160)" /etc/dcv/dcv.conf
          # Console session support
          sed -i "/^\[session-management\/automatic-console-session/a owner=\"ec2-user\"\nstorage-root=\"\/home\/ec2-user\"" /etc/dcv/dcv.conf

          # Update OS
          yum update -q -y
          # yum-cron
          yum install -q -y yum-cron
          sed -i 's/apply_updates = no/apply_updates = yes/g' /etc/yum/yum-cron.conf
          systemctl enable yum-cron

          # USB driver DKMS
          yum install -q -y dkms

          # MountPoint-S3: https://github.com/awslabs/mountpoint-s3
          yum install -q -y mount-s3
          if (yum info mount-s3  | grep -q Installed); then
            rm -f /home/ec2-user/update-mountpoint-s3
          else
            if (uname -a | grep -q x86); then
              curl -s -L -O https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.rpm
            else
              curl -s -L -O https://s3.amazonaws.com/mountpoint-s3-release/latest/arm64/mount-s3.rpm
            fi
            yum install -q -y ./mount-s3.rpm
          fi

          # Redis & Memcached
          amazon-linux-extras install -y redis6 memcached1.5
          systemctl enable --now redis memcached

          # Install PHP
          $CFN_INIT -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c php_install

          # Certbot: https://certbot.eff.org/instructions?ws=other&os=pip
          yum install -q -y augeas-libs
          amazon-linux-extras install -y python3.8        
          /usr/bin/python3.8 -m venv /opt/certbot/
          /opt/certbot/bin/pip install --upgrade pip
          /opt/certbot/bin/pip install certbot
          /opt/certbot/bin/pip install certbot-dns-route53
          ln -s /opt/certbot/bin/certbot /usr/bin/certbot

          # Certbot update script
          # https://certbot.org/renewal-setup: use systemd timer
          touch /etc/sysconfig/certbot
          systemctl daemon-reload
          systemctl enable certbot-renew.timer

          # Web server
          export WEB="${webOption}"
          case $WEB in
            Apache)
              /opt/certbot/bin/pip install certbot-apache
              echo "sudo /opt/certbot/bin/pip install --upgrade certbot-apache" >> /home/ec2-user/update-certbot
              yum install -q -y httpd mod_ssl mod_fcgid
              systemctl enable httpd

              cp /etc/httpd/conf.modules.d/00-mpm.conf /etc/httpd/conf.modules.d/00-mpm.conf."`date +"%Y-%m-%d"`"
              # Apache MPM event: https://httpd.apache.org/docs/2.4/mod/event.html
              sed -i "s/^LoadModule mpm_prefork_module/#&/" /etc/httpd/conf.modules.d/00-mpm.conf
              sed -i "/^#LoadModule mpm_event_module/a LoadModule mpm_event_module modules/mod_mpm_event.so" /etc/httpd/conf.modules.d/00-mpm.conf

              cp /etc/httpd/conf.d/ssl.conf /etc/httpd/conf.d/ssl.conf."`date +"%Y-%m-%d"`"
              # Harden TLS
              sed -i "s/^SSLProtocol/#&/" /etc/httpd/conf.d/ssl.conf
              sed -i "/^#SSLProtocol/a SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1" /etc/httpd/conf.d/ssl.conf
              sed -i "s/^SSLCipherSuite/#&/" /etc/httpd/conf.d/ssl.conf
              sed -i "/^#SSLCipherSuite RC4/a SSLCipherSuite  ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256" /etc/httpd/conf.d/ssl.conf

              # virtual host: for Certbot
              cat << EoF > /etc/httpd/conf.d/www.conf
          <VirtualHost *:80>
            ServerAdmin webmaster@localhost
            DocumentRoot /var/www/html
          </VirtualHost>
          EoF

              # Change permissions and ownership
              usermod -a -G apache ec2-user
              chown -R ec2-user:apache /var/www/html
              chmod -R 2775 /var/www/html
              find /var/www/html -type d -exec sudo chmod 2775 {} \;
              find /var/www/html -type f -exec sudo chmod 0664 {} \;

              systemctl restart httpd
              ;;
            Nginx)
              /opt/certbot/bin/pip install certbot-nginx
              echo "sudo /opt/certbot/bin/pip install --upgrade certbot-nginx" >> /home/ec2-user/update-certbot
              amazon-linux-extras install -y nginx1
              systemctl enable nginx

              cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf."`date +"%Y-%m-%d"`"
              # enable sites-enabled and sites-available folders
              mkdir -p /etc/nginx/sites-enabled
              mkdir -p /etc/nginx/sites-available
              cp /etc/nginx/nginx.conf /etc/nginx/sites-available/default
              ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default

              # nginx.conf: comment out http site
              sed -i "38,55s/^/##/g" /etc/nginx/nginx.conf
              sed -i "/^http/a \    \include /etc/nginx/sites-enabled/*;" /etc/nginx/nginx.conf

              # build sites-available/default config
              sed -i "1,36s/^/#/g" /etc/nginx/sites-available/default
              sed -i "83,84s/^/#/g" /etc/nginx/sites-available/default

              # default: enable HTTPS
              sed -i "58,82s/^#//g" /etc/nginx/sites-available/default
              sed -i "s/ssl_ciphers/#&/" /etc/nginx/sites-available/default
              sed -i "/#ssl_ciphers/a \        \ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;" /etc/nginx/sites-available/default
              sed -i "/^#/d" /etc/nginx/sites-available/default

              # dummy HTTPS cert
              mkdir -p /etc/pki/tls/nginx
              openssl req -x509 -newkey rsa:2048 -keyout /etc/pki/tls/nginx/key.pem -out /etc/pki/tls/nginx/cert.pem -sha256 -days 3650 -nodes -subj "/C=XX/ST=State/L=City/O=Company/OU=Dept/CN=Host"
              sed -i "s/ssl_certificate/#&/" /etc/nginx/sites-available/default
              sed -i "/#ssl_certificate /a \        \ssl_certificate \"/etc/pki/tls/nginx/cert.pem\";" /etc/nginx/sites-available/default
              sed -i "s/ssl_certificate_key /#&/" /etc/nginx/sites-available/default
              sed -i "/#ssl_certificate_key/a \        \ssl_certificate_key \"/etc/pki/tls/nginx/key.pem\";" /etc/nginx/sites-available/default

              cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default."`date +"%Y-%m-%d"`"
              # merge http and https and set default_server
              sed -i "18,20d;23,24d;36,45d" /etc/nginx/sites-available/default
              sed -i "s/80;/80 default_server;/g" /etc/nginx/sites-available/default
              sed -i "s/http2;/http2 default_server;/g" /etc/nginx/sites-available/default
              # remove leading white spaces and commented lines
              sed -i "/^#/d" /etc/nginx/sites-available/default
              sed -i "s/^\s\s\s\s//" /etc/nginx/sites-available/default

              # Change permissions and ownership
              usermod -a -G nginx ec2-user
              usermod -a -G nginx apache
              chown -R ec2-user:nginx /usr/share/nginx/html
              chmod -R 2775 /usr/share/nginx/html
              find /usr/share/nginx/html -type d -exec sudo chmod 2775 {} \;
              find /usr/share/nginx/html -type f -exec sudo chmod 0664 {} \;

              systemctl restart nginx
              ;;
            none)
              yum remove -q -y httpd
              ;;
          esac

          # Database
          export DB="${databaseOption}"
          case $DB in
            MySQL) # https://dev.mysql.com/downloads/repo/yum/
              # https://dev.mysql.com/doc/refman/8.0/en/checking-rpm-signature.html
              rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
              # https://dev.mysql.com/doc/refman/8.0/en/linux-installation-yum-repo.html
              yum install -q -y https://dev.mysql.com/get/mysql80-community-release-el7-11.noarch.rpm
              yum install -q -y mysql-community-server
              systemctl enable mysqld
              ;;
            MariaDB)
              amazon-linux-extras install -y mariadb10.5
              systemctl enable mariadb
              ;;
            PostgreSQL)
              amazon-linux-extras enable postgresql14
              yum clean metadata
              yum install -q -y postgresql postgresql-server
              /usr/bin/postgresql-setup --initdb
              systemctl enable postgresql
              ;;
          esac

          # NFS client
          yum install -q -y amazon-efs-utils

          # CodeDeploy agent: https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-linux.html
          yum install -q -y ruby
          yum install -q -y codedeploy-agent
          if [ ! -f /opt/codedeploy-agent/bin/codedeploy-agent ]; then
            curl -s -L -O https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
          fi

          # CloudWatch agent: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-on-EC2-Instance.html
          yum install -q -y amazon-cloudwatch-agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
          systemctl enable amazon-cloudwatch-agent

          #
          systemctl set-default multi-user.target
          systemctl daemon-reload
          systemctl enable dcv-post-reboot

          # enable back IPv6
          sysctl -w net.ipv6.conf.all.disable_ipv6=0
          sysctl -w net.ipv6.conf.default.disable_ipv6=0

          sleep 1 && reboot
      Tags:
        - Key: Name
          Value: !Ref ec2Name
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: GitHub
          Value: https://github.com/aws-samples/ec2-lamp-server

  elasticIP:
    Condition: useElasticIP
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      NetworkBorderGroup: !Ref AWS::Region
      InstanceId: !Ref ec2Instance
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - ${ec2Name}"
        - Key: GitHub
          Value: https://github.com/aws-samples/ec2-lamp-server

Outputs:
  EC2console:
    Description: EC2 console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/home?region=${AWS::Region}#Instances:search=${ec2Instance}"

  EC2instanceConnect:
    Condition: createEICsg
    Description: EC2 Instance Connect
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2-instance-connect/ssh?connType=standard&instanceId=${ec2Instance}&osUser=ec2-user&sshPort=22#/"

  SSMsessionManager:
    Description: SSM Session Manager ("sudo passwd ec2-user" to change password)
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${ec2Instance}"

  DCVwebConsole:
    Description: NICE DCV web browser client (login as ec2-user)
    Value:
      !If [
        displayPublicIP,
        !Sub "https://${ec2Instance.PublicIp}:8443",
        !Sub "https://${ec2Instance.PrivateIp}:8443",
      ]

  WebUrl:
    Description: Website
    Value:
      !If [
        displayPublicIP,
        !Sub "http://${ec2Instance.PublicIp}",
        !Sub "http://${ec2Instance.PrivateIp}",
      ]
